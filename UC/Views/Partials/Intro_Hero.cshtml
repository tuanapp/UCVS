@inherits Umbraco.Web.Mvc.UmbracoViewPage<Pagehome>

@using DotSee.UmbracoExtensions;

@{
    Pagehome homePage = Model;

    IEnumerable<DSliderImage> sliderImages = homePage.Descendant<FolderSliderImages>().Children<DSliderImage>();

    string nextSectionId = "";

    try
    {
        nextSectionId = homePage.Descendant<FolderSections>().Children().OrderBy(x => x.SortOrder).First().Id.ToString();
    }
    catch { }
}
<section class="hero">

    @if (!string.IsNullOrEmpty(nextSectionId))
            {
        <div class="intro-scroll-down">
            <a class="scroll-down" href="#section_@nextSectionId">
                <span class="mouse">
                    <span class="mouse-dot"></span>
                </span>
            </a>
        </div>
    }

    <div class="flexslider fullscreen-carousel hero-slider-1 parallax parallax-section1">
        <ul class="slides">
            @{

                if (sliderImages!=null)
                {
                    foreach (DSliderImage item in sliderImages)
                    {
                        Image img = (Image)Umbraco.TypedMedia(item.Image);

                        string imgFile = (img == null) ? "/img/noimage.jpg?crop=0,0,1920,600" : img.GetCropUrl(imageCropMode: global::Umbraco.Web.Models.ImageCropMode.Max, upScale: true, width:1920, height:600);

                        string title = string.IsNullOrEmpty(item.Title) ? homePage.IntroTitle : item.Title;
                        string subtitle = string.IsNullOrEmpty(item.Subtitle) ? homePage.IntroSubtitle : item.Subtitle;
                        string overlayCss = item.UseOverlay ?
                            item.UseLightOverlay ? "overlay-light80" : "overlay-dark80"
                            : "";

                        string textCss = item.UseLightTextColor ? "light-color" : "dark-color";
                    <li>
                        <img src="@imgFile" alt="@item.Name" draggable="false" />
                        <div class="overlay-hero @overlayCss">
                            <div class="container caption-hero @textCss">
                                <div class="inner-caption">
                                    <h2 class="h2">@title</h2>
                                    <p class="lead">@subtitle</p>
                                    <div>
                                        @foreach (DLinkButton buttonItem in item.Descendants<DLinkButton>())
                                        {
                                            @RenderButton(buttonItem, item.UseLightTextColor)
                                        }
                                    </div>

                                </div>
                            </div>
                        </div>
                    </li>
                    }
                }
            }
        </ul>
    </div>
</section>
<div class="clearfix"></div>


@helper RenderButton(DLinkButton item, bool useLightColor)
{
LinkItem link = item.GetLink();

string buttonCss = (useLightColor ? "btn-white" : "btn-black") + (item.FillButton ? "" : "-line");

    <a href="@link.Url" target="@link.Target" class="btn btn-md @buttonCss">@item.Name</a>
}
