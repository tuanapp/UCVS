//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.7.99
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

[assembly: PureLiveAssembly]
[assembly:ModelsBuilderAssembly(PureLive = true, SourceHash = "b571d7b9eef08fdc")]
[assembly:System.Reflection.AssemblyVersion("0.0.0.1")]

namespace Umbraco.Web.PublishedContentModels
{
	/// <summary>Blog Post</summary>
	[PublishedContentModel("BlogPost")]
	public partial class BlogPost : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "BlogPost";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public BlogPost(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlogPost, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("content"); }
		}

		///<summary>
		/// Introduction
		///</summary>
		[ImplementPropertyType("introduction")]
		public string Introduction
		{
			get { return this.GetPropertyValue<string>("introduction"); }
		}
	}

	/// <summary>Blog Post Repository</summary>
	[PublishedContentModel("BlogPostRepository")]
	public partial class BlogPostRepository : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "BlogPostRepository";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public BlogPostRepository(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlogPostRepository, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Hide in bottom navigation?
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return this.GetPropertyValue<bool>("umbracoNaviHide"); }
		}
	}

	/// <summary>Home</summary>
	[PublishedContentModel("Home")]
	public partial class Home : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Home";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Home(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Home, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("content"); }
		}

		///<summary>
		/// Site Description
		///</summary>
		[ImplementPropertyType("siteDescription")]
		public string SiteDescription
		{
			get { return this.GetPropertyValue<string>("siteDescription"); }
		}

		///<summary>
		/// Site Logo
		///</summary>
		[ImplementPropertyType("siteLogo")]
		public string SiteLogo
		{
			get { return this.GetPropertyValue<string>("siteLogo"); }
		}

		///<summary>
		/// Site Title
		///</summary>
		[ImplementPropertyType("siteTitle")]
		public string SiteTitle
		{
			get { return this.GetPropertyValue<string>("siteTitle"); }
		}
	}

	/// <summary>Landing Page</summary>
	[PublishedContentModel("LandingPage")]
	public partial class LandingPage : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "LandingPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public LandingPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<LandingPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("content"); }
		}

		///<summary>
		/// Hide in bottom navigation?
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return this.GetPropertyValue<bool>("umbracoNaviHide"); }
		}
	}

	/// <summary>Text Page</summary>
	[PublishedContentModel("TextPage")]
	public partial class TextPage : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "TextPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public TextPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<TextPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("content"); }
		}
	}

	// Mixin content Type 1120 with alias "abstractBackgroundImage"
	/// <summary>Abstract Background Image</summary>
	public partial interface IAbstractBackgroundImage : IPublishedContent
	{
		/// <summary>Image</summary>
		IPublishedContent Image { get; }

		/// <summary>Use Light Overlay</summary>
		bool UseLightOverlay { get; }

		/// <summary>Use Light Text Color</summary>
		bool UseLightTextColor { get; }

		/// <summary>Use Overlay</summary>
		bool UseOverlay { get; }
	}

	/// <summary>Abstract Background Image</summary>
	[PublishedContentModel("abstractBackgroundImage")]
	public partial class AbstractBackgroundImage : PublishedContentModel, IAbstractBackgroundImage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "abstractBackgroundImage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public AbstractBackgroundImage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractBackgroundImage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Image
		///</summary>
		[ImplementPropertyType("image")]
		public IPublishedContent Image
		{
			get { return GetImage(this); }
		}

		/// <summary>Static getter for Image</summary>
		public static IPublishedContent GetImage(IAbstractBackgroundImage that) { return that.GetPropertyValue<IPublishedContent>("image"); }

		///<summary>
		/// Use Light Overlay: If you have checked "Use Overlay" above, check this box to use a light overlay. If you leave this box unchecked, a dark overlay will be used.
		///</summary>
		[ImplementPropertyType("useLightOverlay")]
		public bool UseLightOverlay
		{
			get { return GetUseLightOverlay(this); }
		}

		/// <summary>Static getter for Use Light Overlay</summary>
		public static bool GetUseLightOverlay(IAbstractBackgroundImage that) { return that.GetPropertyValue<bool>("useLightOverlay"); }

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor
		{
			get { return GetUseLightTextColor(this); }
		}

		/// <summary>Static getter for Use Light Text Color</summary>
		public static bool GetUseLightTextColor(IAbstractBackgroundImage that) { return that.GetPropertyValue<bool>("useLightTextColor"); }

		///<summary>
		/// Use Overlay: If you have set a background image, you can use a dark or light overlay
		///</summary>
		[ImplementPropertyType("useOverlay")]
		public bool UseOverlay
		{
			get { return GetUseOverlay(this); }
		}

		/// <summary>Static getter for Use Overlay</summary>
		public static bool GetUseOverlay(IAbstractBackgroundImage that) { return that.GetPropertyValue<bool>("useOverlay"); }
	}

	/// <summary>Abstract Non-Page</summary>
	[PublishedContentModel("abstractNonPage")]
	public partial class AbstractNonPage : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "abstractNonPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public AbstractNonPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractNonPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	// Mixin content Type 1122 with alias "abstractOpenGraph"
	/// <summary>Abstract OpenGraph</summary>
	public partial interface IAbstractOpenGraph : IPublishedContent
	{
		/// <summary>Meta Description</summary>
		string MetaDescription { get; }

		/// <summary>Meta Keywords</summary>
		string MetaKeywords { get; }

		/// <summary>Meta Title</summary>
		string MetaTitle { get; }

		/// <summary>OG Description</summary>
		string OgDescription { get; }

		/// <summary>OG Image</summary>
		string OgImage { get; }

		/// <summary>OG Title</summary>
		string OgTitle { get; }

		/// <summary>OG Type</summary>
		string OgType { get; }
	}

	/// <summary>Abstract OpenGraph</summary>
	[PublishedContentModel("abstractOpenGraph")]
	public partial class AbstractOpenGraph : PublishedContentModel, IAbstractOpenGraph
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "abstractOpenGraph";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public AbstractOpenGraph(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractOpenGraph, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return GetMetaDescription(this); }
		}

		/// <summary>Static getter for Meta Description</summary>
		public static string GetMetaDescription(IAbstractOpenGraph that) { return that.GetPropertyValue<string>("metaDescription"); }

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return GetMetaKeywords(this); }
		}

		/// <summary>Static getter for Meta Keywords</summary>
		public static string GetMetaKeywords(IAbstractOpenGraph that) { return that.GetPropertyValue<string>("metaKeywords"); }

		///<summary>
		/// Meta Title
		///</summary>
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle
		{
			get { return GetMetaTitle(this); }
		}

		/// <summary>Static getter for Meta Title</summary>
		public static string GetMetaTitle(IAbstractOpenGraph that) { return that.GetPropertyValue<string>("metaTitle"); }

		///<summary>
		/// OG Description: If you do not specify a value, description will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogDescription")]
		public string OgDescription
		{
			get { return GetOgDescription(this); }
		}

		/// <summary>Static getter for OG Description</summary>
		public static string GetOgDescription(IAbstractOpenGraph that) { return that.GetPropertyValue<string>("ogDescription"); }

		///<summary>
		/// OG Image: If you do not specify an image, the image will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogImage")]
		public string OgImage
		{
			get { return GetOgImage(this); }
		}

		/// <summary>Static getter for OG Image</summary>
		public static string GetOgImage(IAbstractOpenGraph that) { return that.GetPropertyValue<string>("ogImage"); }

		///<summary>
		/// OG Title: If you do not specify a value, title will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogTitle")]
		public string OgTitle
		{
			get { return GetOgTitle(this); }
		}

		/// <summary>Static getter for OG Title</summary>
		public static string GetOgTitle(IAbstractOpenGraph that) { return that.GetPropertyValue<string>("ogTitle"); }

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article
		///</summary>
		[ImplementPropertyType("ogType")]
		public string OgType
		{
			get { return GetOgType(this); }
		}

		/// <summary>Static getter for OG Type</summary>
		public static string GetOgType(IAbstractOpenGraph that) { return that.GetPropertyValue<string>("ogType"); }
	}

	// Mixin content Type 1123 with alias "abstractPage"
	/// <summary>Abstract Page</summary>
	public partial interface IAbstractPage : IPublishedContent
	{
		/// <summary>Alternate Breadcrumb Page Title</summary>
		string AltTitleBreadcrumb { get; }

		/// <summary>Alternate Internal Page Title</summary>
		string AltTitleInternal { get; }

		/// <summary>Alternate Page Title for Menus</summary>
		string AltTitleMenu { get; }

		/// <summary>Browser Title Override</summary>
		string BrowserTitleOverride { get; }

		/// <summary>Hide from Footer</summary>
		bool HideFromFooter { get; }

		/// <summary>Title Override</summary>
		string OverrideTitle { get; }

		/// <summary>Redirect to first sub-page</summary>
		bool RedirectFirstSubPage { get; }

		/// <summary>Hide from Menu</summary>
		bool UmbracoNaviHide { get; }

		/// <summary>Redirect to page</summary>
		string UmbracoRedirect { get; }

		/// <summary>Alternate URL(s)</summary>
		string UmbracoUrlAlias { get; }

		/// <summary>URL part substitution</summary>
		string UmbracoUrlName { get; }
	}

	/// <summary>Abstract Page</summary>
	[PublishedContentModel("abstractPage")]
	public partial class AbstractPage : PublishedContentModel, IAbstractPage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "abstractPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public AbstractPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb
		{
			get { return GetAltTitleBreadcrumb(this); }
		}

		/// <summary>Static getter for Alternate Breadcrumb Page Title</summary>
		public static string GetAltTitleBreadcrumb(IAbstractPage that) { return that.GetPropertyValue<string>("altTitleBreadcrumb"); }

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal
		{
			get { return GetAltTitleInternal(this); }
		}

		/// <summary>Static getter for Alternate Internal Page Title</summary>
		public static string GetAltTitleInternal(IAbstractPage that) { return that.GetPropertyValue<string>("altTitleInternal"); }

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu
		{
			get { return GetAltTitleMenu(this); }
		}

		/// <summary>Static getter for Alternate Page Title for Menus</summary>
		public static string GetAltTitleMenu(IAbstractPage that) { return that.GetPropertyValue<string>("altTitleMenu"); }

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride
		{
			get { return GetBrowserTitleOverride(this); }
		}

		/// <summary>Static getter for Browser Title Override</summary>
		public static string GetBrowserTitleOverride(IAbstractPage that) { return that.GetPropertyValue<string>("browserTitleOverride"); }

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter
		{
			get { return GetHideFromFooter(this); }
		}

		/// <summary>Static getter for Hide from Footer</summary>
		public static bool GetHideFromFooter(IAbstractPage that) { return that.GetPropertyValue<bool>("hideFromFooter"); }

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle
		{
			get { return GetOverrideTitle(this); }
		}

		/// <summary>Static getter for Title Override</summary>
		public static string GetOverrideTitle(IAbstractPage that) { return that.GetPropertyValue<string>("overrideTitle"); }

		///<summary>
		/// Redirect to first sub-page: If you check this box, the current page will immediately redirect to its first child page.
		///</summary>
		[ImplementPropertyType("redirectFirstSubPage")]
		public bool RedirectFirstSubPage
		{
			get { return GetRedirectFirstSubPage(this); }
		}

		/// <summary>Static getter for Redirect to first sub-page</summary>
		public static bool GetRedirectFirstSubPage(IAbstractPage that) { return that.GetPropertyValue<bool>("redirectFirstSubPage"); }

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return GetUmbracoNaviHide(this); }
		}

		/// <summary>Static getter for Hide from Menu</summary>
		public static bool GetUmbracoNaviHide(IAbstractPage that) { return that.GetPropertyValue<bool>("umbracoNaviHide"); }

		///<summary>
		/// Redirect to page: If you check this box, the current page will immediately redirect to the page selected. Checking this box takes precedence over the "Redirect to first sub-page" setting.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public string UmbracoRedirect
		{
			get { return GetUmbracoRedirect(this); }
		}

		/// <summary>Static getter for Redirect to page</summary>
		public static string GetUmbracoRedirect(IAbstractPage that) { return that.GetPropertyValue<string>("umbracoRedirect"); }

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return GetUmbracoUrlAlias(this); }
		}

		/// <summary>Static getter for Alternate URL(s)</summary>
		public static string GetUmbracoUrlAlias(IAbstractPage that) { return that.GetPropertyValue<string>("umbracoUrlAlias"); }

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return GetUmbracoUrlName(this); }
		}

		/// <summary>Static getter for URL part substitution</summary>
		public static string GetUmbracoUrlName(IAbstractPage that) { return that.GetPropertyValue<string>("umbracoUrlName"); }
	}

	/// <summary>Abstract Page Advanced</summary>
	[PublishedContentModel("abstractPageAdvanced")]
	public partial class AbstractPageAdvanced : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "abstractPageAdvanced";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public AbstractPageAdvanced(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractPageAdvanced, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	// Mixin content Type 1125 with alias "abstractPageBackgroundImage"
	/// <summary>Abstract Page Background Image</summary>
	public partial interface IAbstractPageBackgroundImage : IPublishedContent
	{
		/// <summary>Hide Breadcrumb</summary>
		bool HideBreadcrumb { get; }

		/// <summary>Large height</summary>
		bool LargeHeight { get; }

		/// <summary>Background Image</summary>
		IPublishedContent PageBackgroundImage { get; }

		/// <summary>Summary</summary>
		string Summary { get; }

		/// <summary>Use Light Overlay</summary>
		bool UseLightOverlay { get; }

		/// <summary>Use Light Text Color</summary>
		bool UseLightTextColor { get; }

		/// <summary>Use Overlay</summary>
		bool UseOverlay { get; }
	}

	/// <summary>Abstract Page Background Image</summary>
	[PublishedContentModel("abstractPageBackgroundImage")]
	public partial class AbstractPageBackgroundImage : PublishedContentModel, IAbstractPageBackgroundImage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "abstractPageBackgroundImage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public AbstractPageBackgroundImage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractPageBackgroundImage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Hide Breadcrumb: Hides the generated breadcrumb from the top image. You can also globally hide all breadcrumbs by checking a box in Site Configuration.
		///</summary>
		[ImplementPropertyType("hideBreadcrumb")]
		public bool HideBreadcrumb
		{
			get { return GetHideBreadcrumb(this); }
		}

		/// <summary>Static getter for Hide Breadcrumb</summary>
		public static bool GetHideBreadcrumb(IAbstractPageBackgroundImage that) { return that.GetPropertyValue<bool>("hideBreadcrumb"); }

		///<summary>
		/// Large height: Set a height for the background image. If you check this box the image will have a larger height.
		///</summary>
		[ImplementPropertyType("largeHeight")]
		public bool LargeHeight
		{
			get { return GetLargeHeight(this); }
		}

		/// <summary>Static getter for Large height</summary>
		public static bool GetLargeHeight(IAbstractPageBackgroundImage that) { return that.GetPropertyValue<bool>("largeHeight"); }

		///<summary>
		/// Background Image: Optionally set a background image for the top section of the page. If you don't set an image then no other settings defined here will apply.
		///</summary>
		[ImplementPropertyType("pageBackgroundImage")]
		public IPublishedContent PageBackgroundImage
		{
			get { return GetPageBackgroundImage(this); }
		}

		/// <summary>Static getter for Background Image</summary>
		public static IPublishedContent GetPageBackgroundImage(IAbstractPageBackgroundImage that) { return that.GetPropertyValue<IPublishedContent>("pageBackgroundImage"); }

		///<summary>
		/// Summary: Enter a summary which will appear under the page title. If breadcrumbs are enabled summary will appear underneath the breadcrumb.
		///</summary>
		[ImplementPropertyType("summary")]
		public string Summary
		{
			get { return GetSummary(this); }
		}

		/// <summary>Static getter for Summary</summary>
		public static string GetSummary(IAbstractPageBackgroundImage that) { return that.GetPropertyValue<string>("summary"); }

		///<summary>
		/// Use Light Overlay: If you have checked "Use Overlay" above, check this box to use a light overlay. If you leave this box unchecked, a dark overlay will be used instead.
		///</summary>
		[ImplementPropertyType("useLightOverlay")]
		public bool UseLightOverlay
		{
			get { return GetUseLightOverlay(this); }
		}

		/// <summary>Static getter for Use Light Overlay</summary>
		public static bool GetUseLightOverlay(IAbstractPageBackgroundImage that) { return that.GetPropertyValue<bool>("useLightOverlay"); }

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor
		{
			get { return GetUseLightTextColor(this); }
		}

		/// <summary>Static getter for Use Light Text Color</summary>
		public static bool GetUseLightTextColor(IAbstractPageBackgroundImage that) { return that.GetPropertyValue<bool>("useLightTextColor"); }

		///<summary>
		/// Use Overlay: If you have set a background image, you can use a dark or light overlay
		///</summary>
		[ImplementPropertyType("useOverlay")]
		public bool UseOverlay
		{
			get { return GetUseOverlay(this); }
		}

		/// <summary>Static getter for Use Overlay</summary>
		public static bool GetUseOverlay(IAbstractPageBackgroundImage that) { return that.GetPropertyValue<bool>("useOverlay"); }
	}

	/// <summary>Abstract Page Language</summary>
	[PublishedContentModel("abstractPageLanguage")]
	public partial class AbstractPageLanguage : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "abstractPageLanguage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public AbstractPageLanguage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractPageLanguage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	// Mixin content Type 1127 with alias "abstractSectionEffects"
	/// <summary>Abstract Section Effects</summary>
	public partial interface IAbstractSectionEffects : IPublishedContent
	{
		/// <summary>Animation Direction</summary>
		string AnimationDirection { get; }

		/// <summary>Enable Animation</summary>
		bool AnimationEnable { get; }

		/// <summary>Larger Animation</summary>
		bool AnimationLarger { get; }
	}

	/// <summary>Abstract Section Effects</summary>
	[PublishedContentModel("abstractSectionEffects")]
	public partial class AbstractSectionEffects : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "abstractSectionEffects";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public AbstractSectionEffects(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractSectionEffects, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return GetAnimationDirection(this); }
		}

		/// <summary>Static getter for Animation Direction</summary>
		public static string GetAnimationDirection(IAbstractSectionEffects that) { return that.GetPropertyValue<string>("animationDirection"); }

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return GetAnimationEnable(this); }
		}

		/// <summary>Static getter for Enable Animation</summary>
		public static bool GetAnimationEnable(IAbstractSectionEffects that) { return that.GetPropertyValue<bool>("animationEnable"); }

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return GetAnimationLarger(this); }
		}

		/// <summary>Static getter for Larger Animation</summary>
		public static bool GetAnimationLarger(IAbstractSectionEffects that) { return that.GetPropertyValue<bool>("animationLarger"); }
	}

	// Mixin content Type 1128 with alias "abstractTopMenu"
	/// <summary>Abstract Top Menu</summary>
	public partial interface IAbstractTopMenu : IPublishedContent
	{
		/// <summary>Light Top Menu</summary>
		bool LightTopMenu { get; }
	}

	/// <summary>Abstract Top Menu</summary>
	[PublishedContentModel("abstractTopMenu")]
	public partial class AbstractTopMenu : PublishedContentModel, IAbstractTopMenu
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "abstractTopMenu";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public AbstractTopMenu(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractTopMenu, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Light Top Menu: If you are using a dark image or a dark overlay, check this button to make the top menu options appear with light colors on this particular page so that it is visible. If you don't check this option, the default dark options will be used.
		///</summary>
		[ImplementPropertyType("lightTopMenu")]
		public bool LightTopMenu
		{
			get { return GetLightTopMenu(this); }
		}

		/// <summary>Static getter for Light Top Menu</summary>
		public static bool GetLightTopMenu(IAbstractTopMenu that) { return that.GetPropertyValue<bool>("lightTopMenu"); }
	}

	// Mixin content Type 1129 with alias "Abstractlink"
	/// <summary>AbstractLink</summary>
	public partial interface IAbstractlink : IPublishedContent
	{
		/// <summary>External Link</summary>
		string ExternalLink { get; }

		/// <summary>Internal Link</summary>
		IEnumerable<IPublishedContent> InternalLink { get; }
	}

	/// <summary>AbstractLink</summary>
	[PublishedContentModel("Abstractlink")]
	public partial class Abstractlink : PublishedContentModel, IAbstractlink
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Abstractlink";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Abstractlink(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Abstractlink, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// External Link: Optional link to an external page. External link always opens in a new window. External link OVERRIDES internal link in case it is also set.
		///</summary>
		[ImplementPropertyType("externalLink")]
		public string ExternalLink
		{
			get { return GetExternalLink(this); }
		}

		/// <summary>Static getter for External Link</summary>
		public static string GetExternalLink(IAbstractlink that) { return that.GetPropertyValue<string>("externalLink"); }

		///<summary>
		/// Internal Link: Link to a page on your site
		///</summary>
		[ImplementPropertyType("internalLink")]
		public IEnumerable<IPublishedContent> InternalLink
		{
			get { return GetInternalLink(this); }
		}

		/// <summary>Static getter for Internal Link</summary>
		public static IEnumerable<IPublishedContent> GetInternalLink(IAbstractlink that) { return that.GetPropertyValue<IEnumerable<IPublishedContent>>("internalLink"); }
	}

	// Mixin content Type 1130 with alias "AbstractSocialLinks"
	/// <summary>AbstractSocialLinks</summary>
	public partial interface IAbstractSocialLinks : IPublishedContent
	{
		/// <summary>Behance</summary>
		string SocialBehance { get; }

		/// <summary>Facebook</summary>
		string SocialFacebook { get; }

		/// <summary>Flickr</summary>
		string SocialFlickr { get; }

		/// <summary>Google+</summary>
		string SocialGoogleplus { get; }

		/// <summary>Instagram</summary>
		string SocialInstagram { get; }

		/// <summary>LinkedIn</summary>
		string SocialLinkedin { get; }

		/// <summary>Tumblr</summary>
		string SocialTumblr { get; }

		/// <summary>Twitter</summary>
		string SocialTwitter { get; }

		/// <summary>Vimeo</summary>
		string SocialVimeo { get; }

		/// <summary>YouTube</summary>
		string SocialYoutube { get; }
	}

	/// <summary>AbstractSocialLinks</summary>
	[PublishedContentModel("AbstractSocialLinks")]
	public partial class AbstractSocialLinks : PublishedContentModel, IAbstractSocialLinks
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "AbstractSocialLinks";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public AbstractSocialLinks(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractSocialLinks, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Behance
		///</summary>
		[ImplementPropertyType("socialBehance")]
		public string SocialBehance
		{
			get { return GetSocialBehance(this); }
		}

		/// <summary>Static getter for Behance</summary>
		public static string GetSocialBehance(IAbstractSocialLinks that) { return that.GetPropertyValue<string>("socialBehance"); }

		///<summary>
		/// Facebook
		///</summary>
		[ImplementPropertyType("socialFacebook")]
		public string SocialFacebook
		{
			get { return GetSocialFacebook(this); }
		}

		/// <summary>Static getter for Facebook</summary>
		public static string GetSocialFacebook(IAbstractSocialLinks that) { return that.GetPropertyValue<string>("socialFacebook"); }

		///<summary>
		/// Flickr
		///</summary>
		[ImplementPropertyType("socialFlickr")]
		public string SocialFlickr
		{
			get { return GetSocialFlickr(this); }
		}

		/// <summary>Static getter for Flickr</summary>
		public static string GetSocialFlickr(IAbstractSocialLinks that) { return that.GetPropertyValue<string>("socialFlickr"); }

		///<summary>
		/// Google+
		///</summary>
		[ImplementPropertyType("socialGoogleplus")]
		public string SocialGoogleplus
		{
			get { return GetSocialGoogleplus(this); }
		}

		/// <summary>Static getter for Google+</summary>
		public static string GetSocialGoogleplus(IAbstractSocialLinks that) { return that.GetPropertyValue<string>("socialGoogleplus"); }

		///<summary>
		/// Instagram
		///</summary>
		[ImplementPropertyType("socialInstagram")]
		public string SocialInstagram
		{
			get { return GetSocialInstagram(this); }
		}

		/// <summary>Static getter for Instagram</summary>
		public static string GetSocialInstagram(IAbstractSocialLinks that) { return that.GetPropertyValue<string>("socialInstagram"); }

		///<summary>
		/// LinkedIn
		///</summary>
		[ImplementPropertyType("socialLinkedin")]
		public string SocialLinkedin
		{
			get { return GetSocialLinkedin(this); }
		}

		/// <summary>Static getter for LinkedIn</summary>
		public static string GetSocialLinkedin(IAbstractSocialLinks that) { return that.GetPropertyValue<string>("socialLinkedin"); }

		///<summary>
		/// Tumblr
		///</summary>
		[ImplementPropertyType("socialTumblr")]
		public string SocialTumblr
		{
			get { return GetSocialTumblr(this); }
		}

		/// <summary>Static getter for Tumblr</summary>
		public static string GetSocialTumblr(IAbstractSocialLinks that) { return that.GetPropertyValue<string>("socialTumblr"); }

		///<summary>
		/// Twitter
		///</summary>
		[ImplementPropertyType("socialTwitter")]
		public string SocialTwitter
		{
			get { return GetSocialTwitter(this); }
		}

		/// <summary>Static getter for Twitter</summary>
		public static string GetSocialTwitter(IAbstractSocialLinks that) { return that.GetPropertyValue<string>("socialTwitter"); }

		///<summary>
		/// Vimeo
		///</summary>
		[ImplementPropertyType("socialVimeo")]
		public string SocialVimeo
		{
			get { return GetSocialVimeo(this); }
		}

		/// <summary>Static getter for Vimeo</summary>
		public static string GetSocialVimeo(IAbstractSocialLinks that) { return that.GetPropertyValue<string>("socialVimeo"); }

		///<summary>
		/// YouTube
		///</summary>
		[ImplementPropertyType("socialYoutube")]
		public string SocialYoutube
		{
			get { return GetSocialYoutube(this); }
		}

		/// <summary>Static getter for YouTube</summary>
		public static string GetSocialYoutube(IAbstractSocialLinks that) { return that.GetPropertyValue<string>("socialYoutube"); }
	}

	/// <summary>Accordion Item</summary>
	[PublishedContentModel("dAccordionItem")]
	public partial class DAccordionItem : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "dAccordionItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DAccordionItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DAccordionItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("content")]
		public IHtmlString Content
		{
			get { return this.GetPropertyValue<IHtmlString>("content"); }
		}
	}

	/// <summary>Accordion Section</summary>
	[PublishedContentModel("sectionAccordion")]
	public partial class SectionAccordion : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionAccordion";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionAccordion(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionAccordion, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Hide Title
		///</summary>
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle
		{
			get { return this.GetPropertyValue<bool>("hideTitle"); }
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>Action Box Section</summary>
	[PublishedContentModel("sectionActionBox")]
	public partial class SectionActionBox : PublishedContentModel, IAbstractBackgroundImage, IAbstractlink, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionActionBox";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionActionBox(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionActionBox, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Button text
		///</summary>
		[ImplementPropertyType("buttonText")]
		public string ButtonText
		{
			get { return this.GetPropertyValue<string>("buttonText"); }
		}

		///<summary>
		/// Summary
		///</summary>
		[ImplementPropertyType("summary")]
		public string Summary
		{
			get { return this.GetPropertyValue<string>("summary"); }
		}

		///<summary>
		/// Image
		///</summary>
		[ImplementPropertyType("image")]
		public IPublishedContent Image
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetImage(this); }
		}

		///<summary>
		/// Use Light Overlay: If you have checked "Use Overlay" above, check this box to use a light overlay. If you leave this box unchecked, a dark overlay will be used.
		///</summary>
		[ImplementPropertyType("useLightOverlay")]
		public bool UseLightOverlay
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetUseLightOverlay(this); }
		}

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetUseLightTextColor(this); }
		}

		///<summary>
		/// Use Overlay: If you have set a background image, you can use a dark or light overlay
		///</summary>
		[ImplementPropertyType("useOverlay")]
		public bool UseOverlay
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetUseOverlay(this); }
		}

		///<summary>
		/// External Link: Optional link to an external page. External link always opens in a new window. External link OVERRIDES internal link in case it is also set.
		///</summary>
		[ImplementPropertyType("externalLink")]
		public string ExternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetExternalLink(this); }
		}

		///<summary>
		/// Internal Link: Link to a page on your site
		///</summary>
		[ImplementPropertyType("internalLink")]
		public IEnumerable<IPublishedContent> InternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetInternalLink(this); }
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>Blog Articles Folder</summary>
	[PublishedContentModel("folderArticlePosts")]
	public partial class FolderArticlePosts : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "folderArticlePosts";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public FolderArticlePosts(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderArticlePosts, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Blog Author</summary>
	[PublishedContentModel("pageBlogAuthor")]
	public partial class PageBlogAuthor : PublishedContentModel, IAbstractOpenGraph, IAbstractPage, IAbstractSocialLinks
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "pageBlogAuthor";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public PageBlogAuthor(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageBlogAuthor, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Author Bio Page
		///</summary>
		[ImplementPropertyType("authorBioPage")]
		public IEnumerable<IPublishedContent> AuthorBioPage
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("authorBioPage"); }
		}

		///<summary>
		/// Author image
		///</summary>
		[ImplementPropertyType("authorImage")]
		public IPublishedContent AuthorImage
		{
			get { return this.GetPropertyValue<IPublishedContent>("authorImage"); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetMetaKeywords(this); }
		}

		///<summary>
		/// Meta Title
		///</summary>
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetMetaTitle(this); }
		}

		///<summary>
		/// OG Description: If you do not specify a value, description will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogDescription")]
		public string OgDescription
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgDescription(this); }
		}

		///<summary>
		/// OG Image: If you do not specify an image, the image will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogImage")]
		public string OgImage
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgImage(this); }
		}

		///<summary>
		/// OG Title: If you do not specify a value, title will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogTitle")]
		public string OgTitle
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgTitle(this); }
		}

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article
		///</summary>
		[ImplementPropertyType("ogType")]
		public string OgType
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgType(this); }
		}

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetAltTitleBreadcrumb(this); }
		}

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetAltTitleInternal(this); }
		}

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetAltTitleMenu(this); }
		}

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetBrowserTitleOverride(this); }
		}

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetHideFromFooter(this); }
		}

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetOverrideTitle(this); }
		}

		///<summary>
		/// Redirect to first sub-page: If you check this box, the current page will immediately redirect to its first child page.
		///</summary>
		[ImplementPropertyType("redirectFirstSubPage")]
		public bool RedirectFirstSubPage
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetRedirectFirstSubPage(this); }
		}

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to page: If you check this box, the current page will immediately redirect to the page selected. Checking this box takes precedence over the "Redirect to first sub-page" setting.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public string UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Behance
		///</summary>
		[ImplementPropertyType("socialBehance")]
		public string SocialBehance
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialBehance(this); }
		}

		///<summary>
		/// Facebook
		///</summary>
		[ImplementPropertyType("socialFacebook")]
		public string SocialFacebook
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialFacebook(this); }
		}

		///<summary>
		/// Flickr
		///</summary>
		[ImplementPropertyType("socialFlickr")]
		public string SocialFlickr
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialFlickr(this); }
		}

		///<summary>
		/// Google+
		///</summary>
		[ImplementPropertyType("socialGoogleplus")]
		public string SocialGoogleplus
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialGoogleplus(this); }
		}

		///<summary>
		/// Instagram
		///</summary>
		[ImplementPropertyType("socialInstagram")]
		public string SocialInstagram
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialInstagram(this); }
		}

		///<summary>
		/// LinkedIn
		///</summary>
		[ImplementPropertyType("socialLinkedin")]
		public string SocialLinkedin
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialLinkedin(this); }
		}

		///<summary>
		/// Tumblr
		///</summary>
		[ImplementPropertyType("socialTumblr")]
		public string SocialTumblr
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialTumblr(this); }
		}

		///<summary>
		/// Twitter
		///</summary>
		[ImplementPropertyType("socialTwitter")]
		public string SocialTwitter
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialTwitter(this); }
		}

		///<summary>
		/// Vimeo
		///</summary>
		[ImplementPropertyType("socialVimeo")]
		public string SocialVimeo
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialVimeo(this); }
		}

		///<summary>
		/// YouTube
		///</summary>
		[ImplementPropertyType("socialYoutube")]
		public string SocialYoutube
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialYoutube(this); }
		}
	}

	/// <summary>Blog Authors Folder</summary>
	[PublishedContentModel("folderAuthors")]
	public partial class FolderAuthors : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "folderAuthors";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public FolderAuthors(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderAuthors, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Blog Post</summary>
	[PublishedContentModel("pageArticleItem")]
	public partial class PageArticleItem : PublishedContentModel, IAbstractOpenGraph, IAbstractPage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "pageArticleItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public PageArticleItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageArticleItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Author
		///</summary>
		[ImplementPropertyType("author")]
		public IEnumerable<IPublishedContent> Author
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("author"); }
		}

		///<summary>
		/// Categories
		///</summary>
		[ImplementPropertyType("categories")]
		public IEnumerable<IPublishedContent> Categories
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("categories"); }
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("content")]
		public IHtmlString Content
		{
			get { return this.GetPropertyValue<IHtmlString>("content"); }
		}

		///<summary>
		/// Post Date (alternate): If there is a value here, it will presented instead of the default "post date" field. 
		///</summary>
		[ImplementPropertyType("dateLiteral")]
		public string DateLiteral
		{
			get { return this.GetPropertyValue<string>("dateLiteral"); }
		}

		///<summary>
		/// Image
		///</summary>
		[ImplementPropertyType("image")]
		public IPublishedContent Image
		{
			get { return this.GetPropertyValue<IPublishedContent>("image"); }
		}

		///<summary>
		/// List Image: Optionally select an image that will be displayed in lists containing this article. If you don't select an image here, other media contained in the article will be used.
		///</summary>
		[ImplementPropertyType("listImage")]
		public IPublishedContent ListImage
		{
			get { return this.GetPropertyValue<IPublishedContent>("listImage"); }
		}

		///<summary>
		/// Post Date
		///</summary>
		[ImplementPropertyType("postDate")]
		public DateTime PostDate
		{
			get { return this.GetPropertyValue<DateTime>("postDate"); }
		}

		///<summary>
		/// Summary: The summary that will be displayed in list views. If no summary is present, a portion of the actual article text will be used.
		///</summary>
		[ImplementPropertyType("summary")]
		public string Summary
		{
			get { return this.GetPropertyValue<string>("summary"); }
		}

		///<summary>
		/// Tags
		///</summary>
		[ImplementPropertyType("tags")]
		public IEnumerable<string> Tags
		{
			get { return this.GetPropertyValue<IEnumerable<string>>("tags"); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetMetaKeywords(this); }
		}

		///<summary>
		/// Meta Title
		///</summary>
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetMetaTitle(this); }
		}

		///<summary>
		/// OG Description: If you do not specify a value, description will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogDescription")]
		public string OgDescription
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgDescription(this); }
		}

		///<summary>
		/// OG Image: If you do not specify an image, the image will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogImage")]
		public string OgImage
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgImage(this); }
		}

		///<summary>
		/// OG Title: If you do not specify a value, title will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogTitle")]
		public string OgTitle
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgTitle(this); }
		}

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article
		///</summary>
		[ImplementPropertyType("ogType")]
		public string OgType
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgType(this); }
		}

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetAltTitleBreadcrumb(this); }
		}

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetAltTitleInternal(this); }
		}

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetAltTitleMenu(this); }
		}

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetBrowserTitleOverride(this); }
		}

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetHideFromFooter(this); }
		}

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetOverrideTitle(this); }
		}

		///<summary>
		/// Redirect to first sub-page: If you check this box, the current page will immediately redirect to its first child page.
		///</summary>
		[ImplementPropertyType("redirectFirstSubPage")]
		public bool RedirectFirstSubPage
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetRedirectFirstSubPage(this); }
		}

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to page: If you check this box, the current page will immediately redirect to the page selected. Checking this box takes precedence over the "Redirect to first sub-page" setting.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public string UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>Blog Post List Page</summary>
	[PublishedContentModel("pageBlogList")]
	public partial class PageBlogList : PublishedContentModel, IAbstractOpenGraph, IAbstractPage, IAbstractPageBackgroundImage, IAbstractTopMenu
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "pageBlogList";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public PageBlogList(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageBlogList, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Date format: Format when displaying dates. You can use standard formats like dd/MMM/yy. Default format if not specified is dd/MM/yyyy.
		///</summary>
		[ImplementPropertyType("dateFormat")]
		public string DateFormat
		{
			get { return this.GetPropertyValue<string>("dateFormat"); }
		}

		///<summary>
		/// Disqus Short Name
		///</summary>
		[ImplementPropertyType("disqusShortName")]
		public string DisqusShortName
		{
			get { return this.GetPropertyValue<string>("disqusShortName"); }
		}

		///<summary>
		/// Hide authors: Check this box to hide anything author related from post lists and post pages. You will still be able to add authors and define an author for each post, but the information won't appear anywhere.
		///</summary>
		[ImplementPropertyType("hideAuthors")]
		public bool HideAuthors
		{
			get { return this.GetPropertyValue<bool>("hideAuthors"); }
		}

		///<summary>
		/// Hide categories: Check this box to hide anything category related from post lists and post pages. You will still be able to manage categories and assign articles to categories, but the information won't appear anywhere.
		///</summary>
		[ImplementPropertyType("hideCategories")]
		public bool HideCategories
		{
			get { return this.GetPropertyValue<bool>("hideCategories"); }
		}

		///<summary>
		/// Hide dates: Check this box to prevent post dates appearing in lists and individual posts. Posts will still be sorted by date, but the dates themselves will not appear anywhere.
		///</summary>
		[ImplementPropertyType("hideDates")]
		public bool HideDates
		{
			get { return this.GetPropertyValue<bool>("hideDates"); }
		}

		///<summary>
		/// Hide recent articles: Check this box to hide the recent articles list (where applicable)
		///</summary>
		[ImplementPropertyType("hideRecentArticles")]
		public bool HideRecentArticles
		{
			get { return this.GetPropertyValue<bool>("hideRecentArticles"); }
		}

		///<summary>
		/// Hide tags: Check this box to hide anything tag related from post lists and posts. You will still be able to apply tags to posts, but they won't appear anywhere.
		///</summary>
		[ImplementPropertyType("hideTags")]
		public bool HideTags
		{
			get { return this.GetPropertyValue<bool>("hideTags"); }
		}

		///<summary>
		/// Max recent articles to show: The maximum number of recent articles to be shown in the "Recent Articles" list (if it is enabled). If this is left empty, 3 articles will be shown by default.
		///</summary>
		[ImplementPropertyType("maxRecentArticlesToShow")]
		public int MaxRecentArticlesToShow
		{
			get { return this.GetPropertyValue<int>("maxRecentArticlesToShow"); }
		}

		///<summary>
		/// Max tags to show: The maximum number of popular tags to show in the side bar (if enabled). The default number is 10.
		///</summary>
		[ImplementPropertyType("maxTagsToShow")]
		public string MaxTagsToShow
		{
			get { return this.GetPropertyValue<string>("maxTagsToShow"); }
		}

		///<summary>
		/// Posts Inherit Background Image: If you check this box, all blog posts will display the same background image (and settings) as the post list.
		///</summary>
		[ImplementPropertyType("postsInheritBackgroundImage")]
		public bool PostsInheritBackgroundImage
		{
			get { return this.GetPropertyValue<bool>("postsInheritBackgroundImage"); }
		}

		///<summary>
		/// Posts Per Page: Number of posts per page. If you don't specify a value, 5 posts will be displayed per page.
		///</summary>
		[ImplementPropertyType("postsPerPage")]
		public int PostsPerPage
		{
			get { return this.GetPropertyValue<int>("postsPerPage"); }
		}

		///<summary>
		/// Show post count in categories: Check this box if you want the categories list to show a count of posts in each category. Works only if categories are enabled.
		///</summary>
		[ImplementPropertyType("showItemCount")]
		public bool ShowItemCount
		{
			get { return this.GetPropertyValue<bool>("showItemCount"); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetMetaKeywords(this); }
		}

		///<summary>
		/// Meta Title
		///</summary>
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetMetaTitle(this); }
		}

		///<summary>
		/// OG Description: If you do not specify a value, description will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogDescription")]
		public string OgDescription
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgDescription(this); }
		}

		///<summary>
		/// OG Image: If you do not specify an image, the image will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogImage")]
		public string OgImage
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgImage(this); }
		}

		///<summary>
		/// OG Title: If you do not specify a value, title will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogTitle")]
		public string OgTitle
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgTitle(this); }
		}

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article
		///</summary>
		[ImplementPropertyType("ogType")]
		public string OgType
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgType(this); }
		}

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetAltTitleBreadcrumb(this); }
		}

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetAltTitleInternal(this); }
		}

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetAltTitleMenu(this); }
		}

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetBrowserTitleOverride(this); }
		}

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetHideFromFooter(this); }
		}

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetOverrideTitle(this); }
		}

		///<summary>
		/// Redirect to first sub-page: If you check this box, the current page will immediately redirect to its first child page.
		///</summary>
		[ImplementPropertyType("redirectFirstSubPage")]
		public bool RedirectFirstSubPage
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetRedirectFirstSubPage(this); }
		}

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to page: If you check this box, the current page will immediately redirect to the page selected. Checking this box takes precedence over the "Redirect to first sub-page" setting.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public string UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Hide Breadcrumb: Hides the generated breadcrumb from the top image. You can also globally hide all breadcrumbs by checking a box in Site Configuration.
		///</summary>
		[ImplementPropertyType("hideBreadcrumb")]
		public bool HideBreadcrumb
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPageBackgroundImage.GetHideBreadcrumb(this); }
		}

		///<summary>
		/// Large height: Set a height for the background image. If you check this box the image will have a larger height.
		///</summary>
		[ImplementPropertyType("largeHeight")]
		public bool LargeHeight
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPageBackgroundImage.GetLargeHeight(this); }
		}

		///<summary>
		/// Background Image: Optionally set a background image for the top section of the page. If you don't set an image then no other settings defined here will apply.
		///</summary>
		[ImplementPropertyType("pageBackgroundImage")]
		public IPublishedContent PageBackgroundImage
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPageBackgroundImage.GetPageBackgroundImage(this); }
		}

		///<summary>
		/// Summary: Enter a summary which will appear under the page title. If breadcrumbs are enabled summary will appear underneath the breadcrumb.
		///</summary>
		[ImplementPropertyType("summary")]
		public string Summary
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPageBackgroundImage.GetSummary(this); }
		}

		///<summary>
		/// Use Light Overlay: If you have checked "Use Overlay" above, check this box to use a light overlay. If you leave this box unchecked, a dark overlay will be used instead.
		///</summary>
		[ImplementPropertyType("useLightOverlay")]
		public bool UseLightOverlay
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPageBackgroundImage.GetUseLightOverlay(this); }
		}

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPageBackgroundImage.GetUseLightTextColor(this); }
		}

		///<summary>
		/// Use Overlay: If you have set a background image, you can use a dark or light overlay
		///</summary>
		[ImplementPropertyType("useOverlay")]
		public bool UseOverlay
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPageBackgroundImage.GetUseOverlay(this); }
		}

		///<summary>
		/// Light Top Menu: If you are using a dark image or a dark overlay, check this button to make the top menu options appear with light colors on this particular page so that it is visible. If you don't check this option, the default dark options will be used.
		///</summary>
		[ImplementPropertyType("lightTopMenu")]
		public bool LightTopMenu
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractTopMenu.GetLightTopMenu(this); }
		}
	}

	/// <summary>Categories Folder</summary>
	[PublishedContentModel("folderGenericCategories")]
	public partial class FolderGenericCategories : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "folderGenericCategories";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public FolderGenericCategories(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderGenericCategories, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Client Logo Item</summary>
	[PublishedContentModel("dClientLogoitem")]
	public partial class DClientLogoitem : PublishedContentModel, IAbstractlink
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "dClientLogoitem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DClientLogoitem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DClientLogoitem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Logo
		///</summary>
		[ImplementPropertyType("logo")]
		public IPublishedContent Logo
		{
			get { return this.GetPropertyValue<IPublishedContent>("logo"); }
		}

		///<summary>
		/// External Link: Optional link to an external page. External link always opens in a new window. External link OVERRIDES internal link in case it is also set.
		///</summary>
		[ImplementPropertyType("externalLink")]
		public string ExternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetExternalLink(this); }
		}

		///<summary>
		/// Internal Link: Link to a page on your site
		///</summary>
		[ImplementPropertyType("internalLink")]
		public IEnumerable<IPublishedContent> InternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetInternalLink(this); }
		}
	}

	/// <summary>Client Logos Section</summary>
	[PublishedContentModel("sectionClientLogos")]
	public partial class SectionClientLogos : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionClientLogos";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionClientLogos(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionClientLogos, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Hide Text Bubbles: By default, a text bubble containing the item's node name will be displayed when you hover over any client logo. You can disable the text bubbles for all logos by checking this box.
		///</summary>
		[ImplementPropertyType("hideTextBubbles")]
		public bool HideTextBubbles
		{
			get { return this.GetPropertyValue<bool>("hideTextBubbles"); }
		}

		///<summary>
		/// Hide Title
		///</summary>
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle
		{
			get { return this.GetPropertyValue<bool>("hideTitle"); }
		}

		///<summary>
		/// Random Order: Check this box to have logos displayed in random order each time the page is loaded.
		///</summary>
		[ImplementPropertyType("randomOrder")]
		public bool RandomOrder
		{
			get { return this.GetPropertyValue<bool>("randomOrder"); }
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>Configuration Folder</summary>
	[PublishedContentModel("folderConfiguration")]
	public partial class FolderConfiguration : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "folderConfiguration";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public FolderConfiguration(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderConfiguration, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Contact Section</summary>
	[PublishedContentModel("sectionContact")]
	public partial class SectionContact : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionContact";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionContact(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionContact, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Administrator's Email: The email address where notifications will be sent to
		///</summary>
		[ImplementPropertyType("administratorsEmail")]
		public string AdministratorsEmail
		{
			get { return this.GetPropertyValue<string>("administratorsEmail"); }
		}

		///<summary>
		/// Dropdown 1 Values: Enter the values for the first drop down field, one per line. First line will be the caption for the field. If you leave this blank, no dropdown field will be displayed.
		///</summary>
		[ImplementPropertyType("dropdown1Values")]
		public string Dropdown1Values
		{
			get { return this.GetPropertyValue<string>("dropdown1Values"); }
		}

		///<summary>
		/// Dropdown 2 Values: Enter the values for the second drop down field, one per line. First line will be the caption for the field. If you leave this blank, no dropdown field will be displayed.
		///</summary>
		[ImplementPropertyType("dropdown2Values")]
		public string Dropdown2Values
		{
			get { return this.GetPropertyValue<string>("dropdown2Values"); }
		}

		///<summary>
		/// Hide Name: Check this box to hide the Name field
		///</summary>
		[ImplementPropertyType("hideName")]
		public bool HideName
		{
			get { return this.GetPropertyValue<bool>("hideName"); }
		}

		///<summary>
		/// Hide Subject: Check this box to hide the subject field
		///</summary>
		[ImplementPropertyType("hideSubject")]
		public bool HideSubject
		{
			get { return this.GetPropertyValue<bool>("hideSubject"); }
		}

		///<summary>
		/// Hide Title
		///</summary>
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle
		{
			get { return this.GetPropertyValue<bool>("hideTitle"); }
		}

		///<summary>
		/// Intro Text: Optionally enter a summary over the form
		///</summary>
		[ImplementPropertyType("introText")]
		public string IntroText
		{
			get { return this.GetPropertyValue<string>("introText"); }
		}

		///<summary>
		/// Notification Email Body: Any text you would like to appear before the actual contents of the user's message, in the notification email sent to the administrator.
		///</summary>
		[ImplementPropertyType("notificationEmailBody")]
		public string NotificationEmailBody
		{
			get { return this.GetPropertyValue<string>("notificationEmailBody"); }
		}

		///<summary>
		/// Notification Email Subject: The subject of the notification email. If you leave this blank and have the subject form field enabled, it will contain the contents of the subject field. If the subject form field is not enabled and this field is blank, a standard subject from the dictionary will be displayed.
		///</summary>
		[ImplementPropertyType("notificationEmailSubject")]
		public string NotificationEmailSubject
		{
			get { return this.GetPropertyValue<string>("notificationEmailSubject"); }
		}

		///<summary>
		/// Notification Mail From: The email address notification emails will be sent from
		///</summary>
		[ImplementPropertyType("notificationMailFrom")]
		public string NotificationMailFrom
		{
			get { return this.GetPropertyValue<string>("notificationMailFrom"); }
		}

		///<summary>
		/// Notification Mail Sender Alias: A literal to display in place of the sender's email address when notifications are sent.
		///</summary>
		[ImplementPropertyType("notificationMailSenderAlias")]
		public string NotificationMailSenderAlias
		{
			get { return this.GetPropertyValue<string>("notificationMailSenderAlias"); }
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>Content Page</summary>
	[PublishedContentModel("pageContent")]
	public partial class PageContent : PublishedContentModel, IAbstractOpenGraph, IAbstractPage, IAbstractPageBackgroundImage, IAbstractTopMenu
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "pageContent";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public PageContent(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageContent, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetMetaKeywords(this); }
		}

		///<summary>
		/// Meta Title
		///</summary>
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetMetaTitle(this); }
		}

		///<summary>
		/// OG Description: If you do not specify a value, description will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogDescription")]
		public string OgDescription
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgDescription(this); }
		}

		///<summary>
		/// OG Image: If you do not specify an image, the image will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogImage")]
		public string OgImage
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgImage(this); }
		}

		///<summary>
		/// OG Title: If you do not specify a value, title will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogTitle")]
		public string OgTitle
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgTitle(this); }
		}

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article
		///</summary>
		[ImplementPropertyType("ogType")]
		public string OgType
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgType(this); }
		}

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetAltTitleBreadcrumb(this); }
		}

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetAltTitleInternal(this); }
		}

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetAltTitleMenu(this); }
		}

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetBrowserTitleOverride(this); }
		}

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetHideFromFooter(this); }
		}

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetOverrideTitle(this); }
		}

		///<summary>
		/// Redirect to first sub-page: If you check this box, the current page will immediately redirect to its first child page.
		///</summary>
		[ImplementPropertyType("redirectFirstSubPage")]
		public bool RedirectFirstSubPage
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetRedirectFirstSubPage(this); }
		}

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to page: If you check this box, the current page will immediately redirect to the page selected. Checking this box takes precedence over the "Redirect to first sub-page" setting.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public string UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Hide Breadcrumb: Hides the generated breadcrumb from the top image. You can also globally hide all breadcrumbs by checking a box in Site Configuration.
		///</summary>
		[ImplementPropertyType("hideBreadcrumb")]
		public bool HideBreadcrumb
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPageBackgroundImage.GetHideBreadcrumb(this); }
		}

		///<summary>
		/// Large height: Set a height for the background image. If you check this box the image will have a larger height.
		///</summary>
		[ImplementPropertyType("largeHeight")]
		public bool LargeHeight
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPageBackgroundImage.GetLargeHeight(this); }
		}

		///<summary>
		/// Background Image: Optionally set a background image for the top section of the page. If you don't set an image then no other settings defined here will apply.
		///</summary>
		[ImplementPropertyType("pageBackgroundImage")]
		public IPublishedContent PageBackgroundImage
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPageBackgroundImage.GetPageBackgroundImage(this); }
		}

		///<summary>
		/// Summary: Enter a summary which will appear under the page title. If breadcrumbs are enabled summary will appear underneath the breadcrumb.
		///</summary>
		[ImplementPropertyType("summary")]
		public string Summary
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPageBackgroundImage.GetSummary(this); }
		}

		///<summary>
		/// Use Light Overlay: If you have checked "Use Overlay" above, check this box to use a light overlay. If you leave this box unchecked, a dark overlay will be used instead.
		///</summary>
		[ImplementPropertyType("useLightOverlay")]
		public bool UseLightOverlay
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPageBackgroundImage.GetUseLightOverlay(this); }
		}

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPageBackgroundImage.GetUseLightTextColor(this); }
		}

		///<summary>
		/// Use Overlay: If you have set a background image, you can use a dark or light overlay
		///</summary>
		[ImplementPropertyType("useOverlay")]
		public bool UseOverlay
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPageBackgroundImage.GetUseOverlay(this); }
		}

		///<summary>
		/// Light Top Menu: If you are using a dark image or a dark overlay, check this button to make the top menu options appear with light colors on this particular page so that it is visible. If you don't check this option, the default dark options will be used.
		///</summary>
		[ImplementPropertyType("lightTopMenu")]
		public bool LightTopMenu
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractTopMenu.GetLightTopMenu(this); }
		}
	}

	/// <summary>Content Slider Item</summary>
	[PublishedContentModel("dContentSliderItem")]
	public partial class DContentSliderItem : PublishedContentModel, IAbstractlink
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "dContentSliderItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DContentSliderItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DContentSliderItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Button Text: If you do not enter text for the button, the button will NOT display even if a link has been set.
		///</summary>
		[ImplementPropertyType("buttonText")]
		public string ButtonText
		{
			get { return this.GetPropertyValue<string>("buttonText"); }
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("content")]
		public IHtmlString Content
		{
			get { return this.GetPropertyValue<IHtmlString>("content"); }
		}

		///<summary>
		/// Image: Image should have a width of 550 px or more. Smaller images will be upscaled to 550px in desktop resolutions.
		///</summary>
		[ImplementPropertyType("image")]
		public IPublishedContent Image
		{
			get { return this.GetPropertyValue<IPublishedContent>("image"); }
		}

		///<summary>
		/// Image Position
		///</summary>
		[ImplementPropertyType("imagePosition")]
		public int ImagePosition
		{
			get { return this.GetPropertyValue<int>("imagePosition"); }
		}

		///<summary>
		/// External Link: Optional link to an external page. External link always opens in a new window. External link OVERRIDES internal link in case it is also set.
		///</summary>
		[ImplementPropertyType("externalLink")]
		public string ExternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetExternalLink(this); }
		}

		///<summary>
		/// Internal Link: Link to a page on your site
		///</summary>
		[ImplementPropertyType("internalLink")]
		public IEnumerable<IPublishedContent> InternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetInternalLink(this); }
		}
	}

	/// <summary>Content Slider Section</summary>
	[PublishedContentModel("sectionContentSlider")]
	public partial class SectionContentSlider : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionContentSlider";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionContentSlider(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionContentSlider, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>Counters Section</summary>
	[PublishedContentModel("sectionCounter")]
	public partial class SectionCounter : PublishedContentModel, IAbstractBackgroundImage, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionCounter";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionCounter(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionCounter, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Counter 1: First counter is mandatory. You can have one to four counters active. To exclude a specific counter (except the first one), leave the corresponding "text" field blank.
		///</summary>
		[ImplementPropertyType("counter1")]
		public int Counter1
		{
			get { return this.GetPropertyValue<int>("counter1"); }
		}

		///<summary>
		/// Counter 2
		///</summary>
		[ImplementPropertyType("counter2")]
		public int Counter2
		{
			get { return this.GetPropertyValue<int>("counter2"); }
		}

		///<summary>
		/// Counter 3
		///</summary>
		[ImplementPropertyType("counter3")]
		public int Counter3
		{
			get { return this.GetPropertyValue<int>("counter3"); }
		}

		///<summary>
		/// Counter 4
		///</summary>
		[ImplementPropertyType("counter4")]
		public int Counter4
		{
			get { return this.GetPropertyValue<int>("counter4"); }
		}

		///<summary>
		/// Text for Counter 1
		///</summary>
		[ImplementPropertyType("text1")]
		public string Text1
		{
			get { return this.GetPropertyValue<string>("text1"); }
		}

		///<summary>
		/// Text for Counter 2
		///</summary>
		[ImplementPropertyType("text2")]
		public string Text2
		{
			get { return this.GetPropertyValue<string>("text2"); }
		}

		///<summary>
		/// Text for Counter 3
		///</summary>
		[ImplementPropertyType("text3")]
		public string Text3
		{
			get { return this.GetPropertyValue<string>("text3"); }
		}

		///<summary>
		/// Text for Counter 4
		///</summary>
		[ImplementPropertyType("text4")]
		public string Text4
		{
			get { return this.GetPropertyValue<string>("text4"); }
		}

		///<summary>
		/// Image
		///</summary>
		[ImplementPropertyType("image")]
		public IPublishedContent Image
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetImage(this); }
		}

		///<summary>
		/// Use Light Overlay: If you have checked "Use Overlay" above, check this box to use a light overlay. If you leave this box unchecked, a dark overlay will be used.
		///</summary>
		[ImplementPropertyType("useLightOverlay")]
		public bool UseLightOverlay
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetUseLightOverlay(this); }
		}

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetUseLightTextColor(this); }
		}

		///<summary>
		/// Use Overlay: If you have set a background image, you can use a dark or light overlay
		///</summary>
		[ImplementPropertyType("useOverlay")]
		public bool UseOverlay
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetUseOverlay(this); }
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>FAQ (Tabbed) Section</summary>
	[PublishedContentModel("sectionFaqTabbed")]
	public partial class SectionFaqTabbed : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionFaqTabbed";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionFaqTabbed(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionFaqTabbed, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>FAQ Item</summary>
	[PublishedContentModel("dFaqItem")]
	public partial class DFaqItem : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "dFaqItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DFaqItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DFaqItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Answer: (Title of node is the question)
		///</summary>
		[ImplementPropertyType("answer")]
		public IHtmlString Answer
		{
			get { return this.GetPropertyValue<IHtmlString>("answer"); }
		}
	}

	/// <summary>FAQ Section</summary>
	[PublishedContentModel("sectionFaq")]
	public partial class SectionFaq : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionFaq";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionFaq(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionFaq, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>FAQ Tab</summary>
	[PublishedContentModel("dFaqTabItem")]
	public partial class DFaqTabItem : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "dFaqTabItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DFaqTabItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DFaqTabItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Icon
		///</summary>
		[ImplementPropertyType("icon")]
		public string Icon
		{
			get { return this.GetPropertyValue<string>("icon"); }
		}
	}

	/// <summary>Feature Item</summary>
	[PublishedContentModel("dFeatureItem")]
	public partial class DFeatureItem : PublishedContentModel, IAbstractlink
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "dFeatureItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DFeatureItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DFeatureItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Icon: Select the icon you need. You can find the class names together with icons at http://ionicons.com/
		///</summary>
		[ImplementPropertyType("icon")]
		public string Icon
		{
			get { return this.GetPropertyValue<string>("icon"); }
		}

		///<summary>
		/// Position: Select a position for the item - on the left or on the right side of the image
		///</summary>
		[ImplementPropertyType("position")]
		public int Position
		{
			get { return this.GetPropertyValue<int>("position"); }
		}

		///<summary>
		/// Summary
		///</summary>
		[ImplementPropertyType("summary")]
		public string Summary
		{
			get { return this.GetPropertyValue<string>("summary"); }
		}

		///<summary>
		/// External Link: Optional link to an external page. External link always opens in a new window. External link OVERRIDES internal link in case it is also set.
		///</summary>
		[ImplementPropertyType("externalLink")]
		public string ExternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetExternalLink(this); }
		}

		///<summary>
		/// Internal Link: Link to a page on your site
		///</summary>
		[ImplementPropertyType("internalLink")]
		public IEnumerable<IPublishedContent> InternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetInternalLink(this); }
		}
	}

	/// <summary>Features Section</summary>
	[PublishedContentModel("sectionFeatures")]
	public partial class SectionFeatures : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionFeatures";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionFeatures(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionFeatures, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Center Image
		///</summary>
		[ImplementPropertyType("centerImage")]
		public IPublishedContent CenterImage
		{
			get { return this.GetPropertyValue<IPublishedContent>("centerImage"); }
		}

		///<summary>
		/// Subtitle
		///</summary>
		[ImplementPropertyType("subtitle")]
		public string Subtitle
		{
			get { return this.GetPropertyValue<string>("subtitle"); }
		}
	}

	/// <summary>Generic Category Item</summary>
	[PublishedContentModel("dGenericCategoryItem")]
	public partial class DGenericCategoryItem : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "dGenericCategoryItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DGenericCategoryItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DGenericCategoryItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Global Configuration Settings</summary>
	[PublishedContentModel("configGlobalSettings")]
	public partial class ConfigGlobalSettings : PublishedContentModel, IAbstractSocialLinks
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "configGlobalSettings";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ConfigGlobalSettings(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ConfigGlobalSettings, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Add site name as suffix to page titles: If you check this box, the site name will be added as a suffix to page browser titles in the form "Pagetitle - Sitename", except from the home page.
		///</summary>
		[ImplementPropertyType("addSuffix")]
		public bool AddSuffix
		{
			get { return this.GetPropertyValue<bool>("addSuffix"); }
		}

		///<summary>
		/// Logo for dark background: This logo will be automatically displayed when you have a dark background (essentially, when you have selected your top menu to be displayed in light color). When you scroll down, it will be automatically replaced with the default logo.
		///</summary>
		[ImplementPropertyType("alternateLogo")]
		public string AlternateLogo
		{
			get { return this.GetPropertyValue<string>("alternateLogo"); }
		}

		///<summary>
		/// Use Description from OG if Meta Description Empty: Uses the description tag value as the meta description value if the meta description tag is left empty.
		///</summary>
		[ImplementPropertyType("copyMetaDescriptionFromOgIfEmpty")]
		public bool CopyMetaDescriptionFromOgIfEmpty
		{
			get { return this.GetPropertyValue<bool>("copyMetaDescriptionFromOgIfEmpty"); }
		}

		///<summary>
		/// Use Title From OG if Meta Title Empty: Uses the og:title tag value as the meta title value if the meta title tag is left empty. If both are empty, the page's name (node name) is used.
		///</summary>
		[ImplementPropertyType("copyMetaTitleFromOgIfEmpty")]
		public bool CopyMetaTitleFromOgIfEmpty
		{
			get { return this.GetPropertyValue<bool>("copyMetaTitleFromOgIfEmpty"); }
		}

		///<summary>
		/// Default logo: The site logo to be used on all pages
		///</summary>
		[ImplementPropertyType("defaultLogo")]
		public string DefaultLogo
		{
			get { return this.GetPropertyValue<string>("defaultLogo"); }
		}

		///<summary>
		/// Favicon and touch icon: Suggested size: 310x310px
		///</summary>
		[ImplementPropertyType("favicon")]
		public IPublishedContent Favicon
		{
			get { return this.GetPropertyValue<IPublishedContent>("favicon"); }
		}

		///<summary>
		/// Fields for OG Description: Enter the property aliases of the fields you want the description Open Graph tag to take values from if it is empty (must select Page Fields as policy above for this to work). The first non-empty field found will be used. Separate property aliases with a comma (,)
		///</summary>
		[ImplementPropertyType("fieldsForOGDescription")]
		public string FieldsForOgdescription
		{
			get { return this.GetPropertyValue<string>("fieldsForOGDescription"); }
		}

		///<summary>
		/// Fields for OG Image: Enter the property aliases of the fields you want the image Open Graph tag to take values from if it is empty (must select Page Fields as policy above for this to work). The first non-empty field found will be used. Separate property aliases with a comma (,). Only properties of type Textbox, Multiple Media Picker, Upload Field and image Cropper will have their values used.
		///</summary>
		[ImplementPropertyType("fieldsForOGImage")]
		public string FieldsForOgimage
		{
			get { return this.GetPropertyValue<string>("fieldsForOGImage"); }
		}

		///<summary>
		/// Fields for OG Title: Enter the property aliases of the fields you want the title Open Graph tag to take values from if it is empty (must select Page Fields as policy above for this to work). The first non-empty field found will be used. Separate property aliases with a comma (,)
		///</summary>
		[ImplementPropertyType("fieldsForOGTitle")]
		public string FieldsForOgtitle
		{
			get { return this.GetPropertyValue<string>("fieldsForOGTitle"); }
		}

		///<summary>
		/// Address
		///</summary>
		[ImplementPropertyType("footerAddress")]
		public string FooterAddress
		{
			get { return this.GetPropertyValue<string>("footerAddress"); }
		}

		///<summary>
		/// Copyright Text
		///</summary>
		[ImplementPropertyType("footerCopyrightText")]
		public IHtmlString FooterCopyrightText
		{
			get { return this.GetPropertyValue<IHtmlString>("footerCopyrightText"); }
		}

		///<summary>
		/// Email
		///</summary>
		[ImplementPropertyType("footerEmail")]
		public string FooterEmail
		{
			get { return this.GetPropertyValue<string>("footerEmail"); }
		}

		///<summary>
		/// Image: The image on the left. If you don't set an image, the site's logo will display by default.
		///</summary>
		[ImplementPropertyType("footerImage")]
		public string FooterImage
		{
			get { return this.GetPropertyValue<string>("footerImage"); }
		}

		///<summary>
		/// Image link (external): An external link for your image. If you don't specify an external or internal link, the image will not be clickable.  The external image link overrides any value that may have been set for the internal image link.
		///</summary>
		[ImplementPropertyType("footerImageLinkExternal")]
		public string FooterImageLinkExternal
		{
			get { return this.GetPropertyValue<string>("footerImageLinkExternal"); }
		}

		///<summary>
		/// Image link (internal): A page on your site that the image redirects to when clicked. If you don't specify a link the image will not be clickable.
		///</summary>
		[ImplementPropertyType("footerImageLinkInternal")]
		public IEnumerable<IPublishedContent> FooterImageLinkInternal
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("footerImageLinkInternal"); }
		}

		///<summary>
		/// Open link in a new window?
		///</summary>
		[ImplementPropertyType("footerImageLinkNewWindow")]
		public bool FooterImageLinkNewWindow
		{
			get { return this.GetPropertyValue<bool>("footerImageLinkNewWindow"); }
		}

		///<summary>
		/// Link under text (external): An external page to link to. The external link overrides any internal link set for the link under the footer text. If you don't specify an external or internal link, the link will not be displayed.
		///</summary>
		[ImplementPropertyType("footerLinkExternal")]
		public string FooterLinkExternal
		{
			get { return this.GetPropertyValue<string>("footerLinkExternal"); }
		}

		///<summary>
		/// Link under text (internal): If you don't select a page to link to or an external link, the link underneath the footer text will not display.
		///</summary>
		[ImplementPropertyType("footerLinkInternal")]
		public IEnumerable<IPublishedContent> FooterLinkInternal
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("footerLinkInternal"); }
		}

		///<summary>
		/// Open link in a new window?
		///</summary>
		[ImplementPropertyType("footerLinkNewWindow")]
		public bool FooterLinkNewWindow
		{
			get { return this.GetPropertyValue<bool>("footerLinkNewWindow"); }
		}

		///<summary>
		/// Link Title: The text displayed for the link. If you have selected an internal link and have not set any text here, the title of the node (for menus) will be displayed instead.
		///</summary>
		[ImplementPropertyType("footerLinkText")]
		public string FooterLinkText
		{
			get { return this.GetPropertyValue<string>("footerLinkText"); }
		}

		///<summary>
		/// Page links (column 1)
		///</summary>
		[ImplementPropertyType("footerPageLinksColumn1")]
		public IEnumerable<IPublishedContent> FooterPageLinksColumn1
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("footerPageLinksColumn1"); }
		}

		///<summary>
		/// Page links (column 2)
		///</summary>
		[ImplementPropertyType("footerPageLinksColumn2")]
		public IEnumerable<IPublishedContent> FooterPageLinksColumn2
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("footerPageLinksColumn2"); }
		}

		///<summary>
		/// Telephone
		///</summary>
		[ImplementPropertyType("footerTelephone")]
		public string FooterTelephone
		{
			get { return this.GetPropertyValue<string>("footerTelephone"); }
		}

		///<summary>
		/// Text on the left
		///</summary>
		[ImplementPropertyType("footerText")]
		public IHtmlString FooterText
		{
			get { return this.GetPropertyValue<IHtmlString>("footerText"); }
		}

		///<summary>
		/// Generate automatically: If you check this box, the menu will be automatically generated using all 1st-level pages on the site tree (except those who have "hide from menu" option checked). Checking this box overrides the page selector below.
		///</summary>
		[ImplementPropertyType("generateAutomatically")]
		public bool GenerateAutomatically
		{
			get { return this.GetPropertyValue<bool>("generateAutomatically"); }
		}

		///<summary>
		/// Hide Breadcrumbs: Check this box to globally hide breadcrumbs underneath the page title in top background images.
		///</summary>
		[ImplementPropertyType("hideBreadcrumbs")]
		public bool HideBreadcrumbs
		{
			get { return this.GetPropertyValue<bool>("hideBreadcrumbs"); }
		}

		///<summary>
		/// MailChimp API Key: If you leave this empty, value will be taken from your web.config file (if set). If there is no value there as well, then the subscription footer section will be hidden.
		///</summary>
		[ImplementPropertyType("mailChimpAPIKey")]
		public string MailChimpApikey
		{
			get { return this.GetPropertyValue<string>("mailChimpAPIKey"); }
		}

		///<summary>
		/// MailChimp List ID: You must have a list where the only mandatory field is the email.
		///</summary>
		[ImplementPropertyType("mailChimpListID")]
		public string MailChimpListID
		{
			get { return this.GetPropertyValue<string>("mailChimpListID"); }
		}

		///<summary>
		/// Menu items: Select the pages you want to appear on the menu. 
		///</summary>
		[ImplementPropertyType("menuItems")]
		public IEnumerable<IPublishedContent> MenuItems
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("menuItems"); }
		}

		///<summary>
		/// Policy if OG Description Tag Empty: Choose what happens if an Open Graph Description tag for a page is empty. You can get the OG tag value from the home page, from other fields of the page or just leave it empty.
		///</summary>
		[ImplementPropertyType("policyIfOGDescriptionTagEmpty")]
		public int PolicyIfOgdescriptionTagEmpty
		{
			get { return this.GetPropertyValue<int>("policyIfOGDescriptionTagEmpty"); }
		}

		///<summary>
		/// Policy if OG Image Tag Empty: Choose what happens if an Open Graph Image tag for a page is empty. You can get the OG tag value from the home page, from other fields of the page or just leave it empty.
		///</summary>
		[ImplementPropertyType("policyIfOGImageTagEmpty")]
		public int PolicyIfOgimageTagEmpty
		{
			get { return this.GetPropertyValue<int>("policyIfOGImageTagEmpty"); }
		}

		///<summary>
		/// Policy if OG Title Tag Empty: Choose what happens if an Open Graph Title tag for a page is empty. You can get the OG tag value from the home page, from other fields of the page or just leave it empty.
		///</summary>
		[ImplementPropertyType("policyIfOGTagEmpty")]
		public int PolicyIfOgtagEmpty
		{
			get { return this.GetPropertyValue<int>("policyIfOGTagEmpty"); }
		}

		///<summary>
		/// Script after Body start: Any script you put here goes immediately after the starting BODY tag
		///</summary>
		[ImplementPropertyType("scriptAfterBodyStart")]
		public string ScriptAfterBodyStart
		{
			get { return this.GetPropertyValue<string>("scriptAfterBodyStart"); }
		}

		///<summary>
		/// Script before Body end: Any script you put here goes before the closing BODY tag
		///</summary>
		[ImplementPropertyType("scriptBeforeBodyEnd")]
		public string ScriptBeforeBodyEnd
		{
			get { return this.GetPropertyValue<string>("scriptBeforeBodyEnd"); }
		}

		///<summary>
		/// Script in Head element: Any script you put here goes inside the HEAD element of the page
		///</summary>
		[ImplementPropertyType("scriptInHeadElement")]
		public string ScriptInHeadElement
		{
			get { return this.GetPropertyValue<string>("scriptInHeadElement"); }
		}

		///<summary>
		/// Site name: The site name is essentially the browser title for the home page. This will also be appended as a suffix to all other pages if you check the box below.
		///</summary>
		[ImplementPropertyType("siteName")]
		public string SiteName
		{
			get { return this.GetPropertyValue<string>("siteName"); }
		}

		///<summary>
		/// Type if OG Tag Empty: Enter the default OG type value when the type field is left empty.
		///</summary>
		[ImplementPropertyType("typeIfOGTagEmpty")]
		public string TypeIfOgtagEmpty
		{
			get { return this.GetPropertyValue<string>("typeIfOGTagEmpty"); }
		}

		///<summary>
		/// Behance
		///</summary>
		[ImplementPropertyType("socialBehance")]
		public string SocialBehance
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialBehance(this); }
		}

		///<summary>
		/// Facebook
		///</summary>
		[ImplementPropertyType("socialFacebook")]
		public string SocialFacebook
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialFacebook(this); }
		}

		///<summary>
		/// Flickr
		///</summary>
		[ImplementPropertyType("socialFlickr")]
		public string SocialFlickr
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialFlickr(this); }
		}

		///<summary>
		/// Google+
		///</summary>
		[ImplementPropertyType("socialGoogleplus")]
		public string SocialGoogleplus
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialGoogleplus(this); }
		}

		///<summary>
		/// Instagram
		///</summary>
		[ImplementPropertyType("socialInstagram")]
		public string SocialInstagram
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialInstagram(this); }
		}

		///<summary>
		/// LinkedIn
		///</summary>
		[ImplementPropertyType("socialLinkedin")]
		public string SocialLinkedin
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialLinkedin(this); }
		}

		///<summary>
		/// Tumblr
		///</summary>
		[ImplementPropertyType("socialTumblr")]
		public string SocialTumblr
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialTumblr(this); }
		}

		///<summary>
		/// Twitter
		///</summary>
		[ImplementPropertyType("socialTwitter")]
		public string SocialTwitter
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialTwitter(this); }
		}

		///<summary>
		/// Vimeo
		///</summary>
		[ImplementPropertyType("socialVimeo")]
		public string SocialVimeo
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialVimeo(this); }
		}

		///<summary>
		/// YouTube
		///</summary>
		[ImplementPropertyType("socialYoutube")]
		public string SocialYoutube
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSocialLinks.GetSocialYoutube(this); }
		}
	}

	/// <summary>Home Page Assets</summary>
	[PublishedContentModel("folderHomeAssets")]
	public partial class FolderHomeAssets : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "folderHomeAssets";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public FolderHomeAssets(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderHomeAssets, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Image Folder</summary>
	[PublishedContentModel("folderImageGalleryImages")]
	public partial class FolderImageGalleryImages : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "folderImageGalleryImages";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public FolderImageGalleryImages(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderImageGalleryImages, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Image Gallery Item</summary>
	[PublishedContentModel("dImageGalleryItem")]
	public partial class DImageGalleryItem : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "dImageGalleryItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DImageGalleryItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DImageGalleryItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Categories
		///</summary>
		[ImplementPropertyType("categories")]
		public IEnumerable<IPublishedContent> Categories
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("categories"); }
		}

		///<summary>
		/// Image: Image will be resized to a max width of 800 pixels to avoid large image sizes. 
		///</summary>
		[ImplementPropertyType("imageFromMedia")]
		public IPublishedContent ImageFromMedia
		{
			get { return this.GetPropertyValue<IPublishedContent>("imageFromMedia"); }
		}
	}

	/// <summary>Image Gallery Section</summary>
	[PublishedContentModel("sectionImageGallery")]
	public partial class SectionImageGallery : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionImageGallery";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionImageGallery(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionImageGallery, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Label for "All" category option: You can specify custom text for the "All" category option - if you don't enter text here the default setting from the Dictionary (Theme.Gallery.All) will be used.
		///</summary>
		[ImplementPropertyType("allOptionLabel")]
		public string AllOptionLabel
		{
			get { return this.GetPropertyValue<string>("allOptionLabel"); }
		}

		///<summary>
		/// Columns: Select how many columns the images will be presented with (2 min, 4 max). If you don't specify a value, 2 columns will be used.
		///</summary>
		[ImplementPropertyType("columns")]
		public int Columns
		{
			get { return this.GetPropertyValue<int>("columns"); }
		}

		///<summary>
		/// Do not display categories: If you check this box, categories will not be displayed in the image listing (category menu will still display and you can still assign items to categories)
		///</summary>
		[ImplementPropertyType("doNotDisplayCategories")]
		public bool DoNotDisplayCategories
		{
			get { return this.GetPropertyValue<bool>("doNotDisplayCategories"); }
		}

		///<summary>
		/// Hide "All" category option: If you check this box, items will be filtered by the first category and there will be no "all" option in the category menu.
		///</summary>
		[ImplementPropertyType("hideAllCategoryOption")]
		public bool HideAllCategoryOption
		{
			get { return this.GetPropertyValue<bool>("hideAllCategoryOption"); }
		}

		///<summary>
		/// Masonry: If you have images of uneven sizes and wish them to retain their sizes check this box. Otherwise the images will be automatically cropped around the focus point to form a grid.
		///</summary>
		[ImplementPropertyType("masonry")]
		public bool Masonry
		{
			get { return this.GetPropertyValue<bool>("masonry"); }
		}

		///<summary>
		/// Spacing between images: If this box is not checked, images will "stick" to each other
		///</summary>
		[ImplementPropertyType("spacing")]
		public bool Spacing
		{
			get { return this.GetPropertyValue<bool>("spacing"); }
		}

		///<summary>
		/// Upscale Images: If you check this box, the images displayed when a user clicks on the thumbs will be upscaled to match a maximum presentation size for the screen. Otherwise, they will be displayed at their original size. 
		///</summary>
		[ImplementPropertyType("upscaleImages")]
		public bool UpscaleImages
		{
			get { return this.GetPropertyValue<bool>("upscaleImages"); }
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>Link Button</summary>
	[PublishedContentModel("dLinkButton")]
	public partial class DLinkButton : PublishedContentModel, IAbstractlink
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "dLinkButton";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DLinkButton(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DLinkButton, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Fill button: Check this box to fill the button with color, otherwise it will appear transparent
		///</summary>
		[ImplementPropertyType("fillButton")]
		public bool FillButton
		{
			get { return this.GetPropertyValue<bool>("fillButton"); }
		}

		///<summary>
		/// External Link: Optional link to an external page. External link always opens in a new window. External link OVERRIDES internal link in case it is also set.
		///</summary>
		[ImplementPropertyType("externalLink")]
		public string ExternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetExternalLink(this); }
		}

		///<summary>
		/// Internal Link: Link to a page on your site
		///</summary>
		[ImplementPropertyType("internalLink")]
		public IEnumerable<IPublishedContent> InternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetInternalLink(this); }
		}
	}

	/// <summary>Link Buttons Folder</summary>
	[PublishedContentModel("folderLinkButtons")]
	public partial class FolderLinkButtons : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "folderLinkButtons";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public FolderLinkButtons(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderLinkButtons, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Multi Column Section</summary>
	[PublishedContentModel("sectionMultiCol")]
	public partial class SectionMultiCol : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionMultiCol";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionMultiCol(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionMultiCol, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>Percentage Item</summary>
	[PublishedContentModel("dPercentagesItem")]
	public partial class DPercentagesItem : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "dPercentagesItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DPercentagesItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DPercentagesItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Percentage
		///</summary>
		[ImplementPropertyType("percentage")]
		public int Percentage
		{
			get { return this.GetPropertyValue<int>("percentage"); }
		}
	}

	/// <summary>Percentages Section</summary>
	[PublishedContentModel("sectionPercentages")]
	public partial class SectionPercentages : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionPercentages";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionPercentages(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionPercentages, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Hide Title
		///</summary>
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle
		{
			get { return this.GetPropertyValue<bool>("hideTitle"); }
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>Placeholder</summary>
	[PublishedContentModel("sectionPlaceholder")]
	public partial class SectionPlaceholder : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionPlaceholder";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionPlaceholder(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionPlaceholder, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Reusable element(s): Pick the reusable element(s) you want this to show. This works only if you have defined at least one reusable element in the "Reusable elements" node under "Site Configuration".
		///</summary>
		[ImplementPropertyType("reusableElements")]
		public IEnumerable<IPublishedContent> ReusableElements
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("reusableElements"); }
		}
	}

	/// <summary>Portfolio Item Page</summary>
	[PublishedContentModel("pagePortfolioItem")]
	public partial class PagePortfolioItem : PublishedContentModel, IAbstractlink, IAbstractOpenGraph, IAbstractPage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "pagePortfolioItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public PagePortfolioItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PagePortfolioItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Categories: Choose one or more categories your project belongs to. You must have defined some categories for your portfolio items first.
		///</summary>
		[ImplementPropertyType("categories")]
		public IEnumerable<IPublishedContent> Categories
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("categories"); }
		}

		///<summary>
		/// Client: If you leave this empty, no client information will be displayed.
		///</summary>
		[ImplementPropertyType("client")]
		public string Client
		{
			get { return this.GetPropertyValue<string>("client"); }
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("content")]
		public IHtmlString Content
		{
			get { return this.GetPropertyValue<IHtmlString>("content"); }
		}

		///<summary>
		/// Custom fields: Enter the field title followed by its value and separated by ":" (one per line). For example, you may want to enter "Budget", "Location" or "Equipment" as a custom field. Those will be displayed right below the fixed fields (categories, date, link, client). Example (without the quotes): "Location:New York"
		///</summary>
		[ImplementPropertyType("customFields")]
		public string CustomFields
		{
			get { return this.GetPropertyValue<string>("customFields"); }
		}

		///<summary>
		/// Custom "Visit Site" button caption: You can override the default "Visit Site" button caption with your own here.
		///</summary>
		[ImplementPropertyType("customVisitSiteButtonCaption")]
		public string CustomVisitSiteButtonCaption
		{
			get { return this.GetPropertyValue<string>("customVisitSiteButtonCaption"); }
		}

		///<summary>
		/// Do not display categories: Check this box to hide the categories list for this project from the detail page, as well as from the listing page (where it applies). If you have globally hidden categories via the parent folder's settings page then this checkbox does nothing.
		///</summary>
		[ImplementPropertyType("doNotDisplayCategories")]
		public bool DoNotDisplayCategories
		{
			get { return this.GetPropertyValue<bool>("doNotDisplayCategories"); }
		}

		///<summary>
		/// Do not display release date: Check this box to prevent the release date from displaying in the item's page. If you have globally hidden release dates via the parent folder's settings, this checkbox will do nothing. 
		///</summary>
		[ImplementPropertyType("doNotDisplayReleaseDate")]
		public bool DoNotDisplayReleaseDate
		{
			get { return this.GetPropertyValue<bool>("doNotDisplayReleaseDate"); }
		}

		///<summary>
		/// Do not show large first image: If you have selected to show images as a list, you can check this box to prevent the first image show at full width (it will be part of the 2-column list together with other images). This is useful when, for example, you need to show a video on top and a list of images underneath.
		///</summary>
		[ImplementPropertyType("doNotShowLargeFirstImage")]
		public bool DoNotShowLargeFirstImage
		{
			get { return this.GetPropertyValue<bool>("doNotShowLargeFirstImage"); }
		}

		///<summary>
		/// Images: Pick one or more images to be displayed in your page. 
		///</summary>
		[ImplementPropertyType("imageGallery")]
		public IEnumerable<IPublishedContent> ImageGallery
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("imageGallery"); }
		}

		///<summary>
		/// List image: The image that will be used on the portfolio list. If you do not select anything here, the first image from your image gallery will be used. The image will be cropped according to your other settings (spacing, wide display)
		///</summary>
		[ImplementPropertyType("listImage")]
		public IPublishedContent ListImage
		{
			get { return this.GetPropertyValue<IPublishedContent>("listImage"); }
		}

		///<summary>
		/// Related items: Choose one or more projects related to the current one. 
		///</summary>
		[ImplementPropertyType("relatedItems")]
		public IEnumerable<IPublishedContent> RelatedItems
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("relatedItems"); }
		}

		///<summary>
		/// Title for Related Items section: This title will appear over the "related projects" section (wherever related projects have been defined). You can override this title per project. If you leave this empty, the title defined in the section settings will be used instead.
		///</summary>
		[ImplementPropertyType("relatedTitle")]
		public string RelatedTitle
		{
			get { return this.GetPropertyValue<string>("relatedTitle"); }
		}

		///<summary>
		/// Release date: The release date of your project. If you leave this blank, no release date will be displayed. If you have chosen to sort portfolio items by date it is essential to have a value here for proper sorting. 
		///</summary>
		[ImplementPropertyType("releaseDate")]
		public DateTime ReleaseDate
		{
			get { return this.GetPropertyValue<DateTime>("releaseDate"); }
		}

		///<summary>
		/// Show images as list: By default, if there is more than one image in the gallery, a slider will be created. If you check this box the first image will be displayed on top (full page width) and the rest of the images will be displayed underneath it.
		///</summary>
		[ImplementPropertyType("showImagesAsList")]
		public bool ShowImagesAsList
		{
			get { return this.GetPropertyValue<bool>("showImagesAsList"); }
		}

		///<summary>
		/// Show "Visit Site" button: Check this box to show the "Visit Site" button if a link is present. This will be the same link shown in the project's information. 
		///</summary>
		[ImplementPropertyType("showVisitSiteButton")]
		public bool ShowVisitSiteButton
		{
			get { return this.GetPropertyValue<bool>("showVisitSiteButton"); }
		}

		///<summary>
		/// Summary
		///</summary>
		[ImplementPropertyType("summary")]
		public string Summary
		{
			get { return this.GetPropertyValue<string>("summary"); }
		}

		///<summary>
		/// Video Url: Enter a YouTube or Vimeo URL as it appears in the browser's address bar (do not use the embed or share code).
		///</summary>
		[ImplementPropertyType("videoUrl")]
		public string VideoUrl
		{
			get { return this.GetPropertyValue<string>("videoUrl"); }
		}

		///<summary>
		/// External Link: Optional link to an external page. External link always opens in a new window. External link OVERRIDES internal link in case it is also set.
		///</summary>
		[ImplementPropertyType("externalLink")]
		public string ExternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetExternalLink(this); }
		}

		///<summary>
		/// Internal Link: Link to a page on your site
		///</summary>
		[ImplementPropertyType("internalLink")]
		public IEnumerable<IPublishedContent> InternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetInternalLink(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetMetaKeywords(this); }
		}

		///<summary>
		/// Meta Title
		///</summary>
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetMetaTitle(this); }
		}

		///<summary>
		/// OG Description: If you do not specify a value, description will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogDescription")]
		public string OgDescription
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgDescription(this); }
		}

		///<summary>
		/// OG Image: If you do not specify an image, the image will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogImage")]
		public string OgImage
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgImage(this); }
		}

		///<summary>
		/// OG Title: If you do not specify a value, title will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogTitle")]
		public string OgTitle
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgTitle(this); }
		}

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article
		///</summary>
		[ImplementPropertyType("ogType")]
		public string OgType
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgType(this); }
		}

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetAltTitleBreadcrumb(this); }
		}

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetAltTitleInternal(this); }
		}

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetAltTitleMenu(this); }
		}

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetBrowserTitleOverride(this); }
		}

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetHideFromFooter(this); }
		}

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetOverrideTitle(this); }
		}

		///<summary>
		/// Redirect to first sub-page: If you check this box, the current page will immediately redirect to its first child page.
		///</summary>
		[ImplementPropertyType("redirectFirstSubPage")]
		public bool RedirectFirstSubPage
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetRedirectFirstSubPage(this); }
		}

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to page: If you check this box, the current page will immediately redirect to the page selected. Checking this box takes precedence over the "Redirect to first sub-page" setting.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public string UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoUrlName(this); }
		}
	}

	/// <summary>Portfolio Items Folder</summary>
	[PublishedContentModel("folderPortfolioItems")]
	public partial class FolderPortfolioItems : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "folderPortfolioItems";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public FolderPortfolioItems(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderPortfolioItems, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Portfolio Section</summary>
	[PublishedContentModel("sectionPortfolio")]
	public partial class SectionPortfolio : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionPortfolio";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionPortfolio(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionPortfolio, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Label for "All" category option: You can specify custom text for the "All" category option - if you don't enter text here the default setting from the Dictionary (Theme.Gallery.All) will be used.
		///</summary>
		[ImplementPropertyType("allOptionLabel")]
		public string AllOptionLabel
		{
			get { return this.GetPropertyValue<string>("allOptionLabel"); }
		}

		///<summary>
		/// Columns: Select how many columns the images will be presented with (2 min, 4 max). If you don't specify a value, 2 columns will be rendered.
		///</summary>
		[ImplementPropertyType("columns")]
		public int Columns
		{
			get { return this.GetPropertyValue<int>("columns"); }
		}

		///<summary>
		/// Date format: Format when displaying dates. You can use standard formats like dd/MMM/yy. Default format if not specified is dd/MM/yyyy.
		///</summary>
		[ImplementPropertyType("dateFormat")]
		public string DateFormat
		{
			get { return this.GetPropertyValue<string>("dateFormat"); }
		}

		///<summary>
		/// Do not display categories: If you check this box, categories will not be displayed in the listing as well as in the detail page of each project. You can also leave this box unchecked and selectively hide the category list for specific projects in the portfolio item settings page.
		///</summary>
		[ImplementPropertyType("doNotDisplayCategories")]
		public bool DoNotDisplayCategories
		{
			get { return this.GetPropertyValue<bool>("doNotDisplayCategories"); }
		}

		///<summary>
		/// Do not display release date: If you check this box, release date will not be displayed inside the page of each project. You can also leave this box unchecked and selectively hide release dates on specific projects, in the portfolio item settings page.
		///</summary>
		[ImplementPropertyType("doNotDisplayReleaseDate")]
		public bool DoNotDisplayReleaseDate
		{
			get { return this.GetPropertyValue<bool>("doNotDisplayReleaseDate"); }
		}

		///<summary>
		/// Hide "All" category option: If you check this box, items will be filtered by the first category and there will be no "all" option in the category menu.
		///</summary>
		[ImplementPropertyType("hideAllCategoryOption")]
		public bool HideAllCategoryOption
		{
			get { return this.GetPropertyValue<bool>("hideAllCategoryOption"); }
		}

		///<summary>
		/// Hide next / previous item navigation: If you check this box, next/previous navigation will not be displayed at the bottom of each portfolio item page.
		///</summary>
		[ImplementPropertyType("hideNextPrevious")]
		public bool HideNextPrevious
		{
			get { return this.GetPropertyValue<bool>("hideNextPrevious"); }
		}

		///<summary>
		/// Inherit background image: Check this box to have all portfolio item page inherit their top background image (and settings) from the page that contains this section
		///</summary>
		[ImplementPropertyType("inheritBackgroundImage")]
		public bool InheritBackgroundImage
		{
			get { return this.GetPropertyValue<bool>("inheritBackgroundImage"); }
		}

		///<summary>
		/// Masonry: If you have images of uneven sizes and wish them to retain their sizes check this box. Otherwise the images will be automatically cropped around the focus point to form a grid.
		///</summary>
		[ImplementPropertyType("masonry")]
		public bool Masonry
		{
			get { return this.GetPropertyValue<bool>("masonry"); }
		}

		///<summary>
		/// Restrict next/previous projects to current project's categories: If checked, next/previous navigation will only include projects belonging to the same category (or categories) as the project being viewed.
		///</summary>
		[ImplementPropertyType("nextPrevRestrictToCategories")]
		public bool NextPrevRestrictToCategories
		{
			get { return this.GetPropertyValue<bool>("nextPrevRestrictToCategories"); }
		}

		///<summary>
		/// Random related projects: If "related projects" are empty for a specific item, display random related projects for this item.
		///</summary>
		[ImplementPropertyType("randomRelated")]
		public bool RandomRelated
		{
			get { return this.GetPropertyValue<bool>("randomRelated"); }
		}

		///<summary>
		/// Random related projects number: Number of random related items to show (only if random items are enabled). Default is 3.
		///</summary>
		[ImplementPropertyType("randomRelatedNumber")]
		public int RandomRelatedNumber
		{
			get { return this.GetPropertyValue<int>("randomRelatedNumber"); }
		}

		///<summary>
		/// Restrict random items to categories: If random related projects are enabled, checking this box restricts random projects only to categories the currently viewed item also belongs to
		///</summary>
		[ImplementPropertyType("randomRelatedRestrictToCategories")]
		public bool RandomRelatedRestrictToCategories
		{
			get { return this.GetPropertyValue<bool>("randomRelatedRestrictToCategories"); }
		}

		///<summary>
		/// Default title for related projects section: This title will appear over the "related projects" section (wherever related projects have been defined). You can override this title per project. If you leave this empty, the section will be displayed without a title.
		///</summary>
		[ImplementPropertyType("relatedTitle")]
		public string RelatedTitle
		{
			get { return this.GetPropertyValue<string>("relatedTitle"); }
		}

		///<summary>
		/// Show item count: Show a counter next to category names to indicate how many portfolio items belong to each category
		///</summary>
		[ImplementPropertyType("showItemCount")]
		public bool ShowItemCount
		{
			get { return this.GetPropertyValue<bool>("showItemCount"); }
		}

		///<summary>
		/// Sort by date: If you check this box, portfolio items will be sorted by their release date (newest first). Otherwise, they'll be sorted with their natural order.
		///</summary>
		[ImplementPropertyType("sortByDate")]
		public bool SortByDate
		{
			get { return this.GetPropertyValue<bool>("sortByDate"); }
		}

		///<summary>
		/// Spacing between images: If this box is not checked, images will "stick" to each other
		///</summary>
		[ImplementPropertyType("spacing")]
		public bool Spacing
		{
			get { return this.GetPropertyValue<bool>("spacing"); }
		}

		///<summary>
		/// Wide: Check this box to make the portfolio take the full width of the page on desktop resolutions.
		///</summary>
		[ImplementPropertyType("wide")]
		public bool Wide
		{
			get { return this.GetPropertyValue<bool>("wide"); }
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>Portfolio Sections Folder</summary>
	[PublishedContentModel("folderPortfolioSections")]
	public partial class FolderPortfolioSections : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "folderPortfolioSections";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public FolderPortfolioSections(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderPortfolioSections, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Pricing Item</summary>
	[PublishedContentModel("dPricingItem")]
	public partial class DPricingItem : PublishedContentModel, IAbstractlink
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "dPricingItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DPricingItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DPricingItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Button Text: In order for the button to appear, button text must be filled and there must also be a working link. If a link is not present, then the button will be replaced with plain text.
		///</summary>
		[ImplementPropertyType("buttonText")]
		public string ButtonText
		{
			get { return this.GetPropertyValue<string>("buttonText"); }
		}

		///<summary>
		/// Currency: E.g. "$" or "€"
		///</summary>
		[ImplementPropertyType("currency")]
		public string Currency
		{
			get { return this.GetPropertyValue<string>("currency"); }
		}

		///<summary>
		/// Description: Type features, one per line. You can use bold etc.
		///</summary>
		[ImplementPropertyType("description")]
		public IHtmlString Description
		{
			get { return this.GetPropertyValue<IHtmlString>("description"); }
		}

		///<summary>
		/// Highlight: If you check this box, the current pricing item will be highlighted.
		///</summary>
		[ImplementPropertyType("highlight")]
		public bool Highlight
		{
			get { return this.GetPropertyValue<bool>("highlight"); }
		}

		///<summary>
		/// Period: E.g. "per month", "per year"
		///</summary>
		[ImplementPropertyType("period")]
		public string Period
		{
			get { return this.GetPropertyValue<string>("period"); }
		}

		///<summary>
		/// Price
		///</summary>
		[ImplementPropertyType("price")]
		public string Price
		{
			get { return this.GetPropertyValue<string>("price"); }
		}

		///<summary>
		/// External Link: Optional link to an external page. External link always opens in a new window. External link OVERRIDES internal link in case it is also set.
		///</summary>
		[ImplementPropertyType("externalLink")]
		public string ExternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetExternalLink(this); }
		}

		///<summary>
		/// Internal Link: Link to a page on your site
		///</summary>
		[ImplementPropertyType("internalLink")]
		public IEnumerable<IPublishedContent> InternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetInternalLink(this); }
		}
	}

	/// <summary>Pricing Section</summary>
	[PublishedContentModel("sectionPricing")]
	public partial class SectionPricing : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionPricing";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionPricing(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionPricing, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>Process Item</summary>
	[PublishedContentModel("dProcessItem")]
	public partial class DProcessItem : PublishedContentModel, IAbstractlink
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "dProcessItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DProcessItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DProcessItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Bubble Text
		///</summary>
		[ImplementPropertyType("bubbleText")]
		public string BubbleText
		{
			get { return this.GetPropertyValue<string>("bubbleText"); }
		}

		///<summary>
		/// Icon: Select the icon you need. You can find the class names together with icons at http://ionicons.com/
		///</summary>
		[ImplementPropertyType("icon")]
		public string Icon
		{
			get { return this.GetPropertyValue<string>("icon"); }
		}

		///<summary>
		/// External Link: Optional link to an external page. External link always opens in a new window. External link OVERRIDES internal link in case it is also set.
		///</summary>
		[ImplementPropertyType("externalLink")]
		public string ExternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetExternalLink(this); }
		}

		///<summary>
		/// Internal Link: Link to a page on your site
		///</summary>
		[ImplementPropertyType("internalLink")]
		public IEnumerable<IPublishedContent> InternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetInternalLink(this); }
		}
	}

	/// <summary>Process Section</summary>
	[PublishedContentModel("sectionProcess")]
	public partial class SectionProcess : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionProcess";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionProcess(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionProcess, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// delay: Set a delay for displaying text bubbles (where defined). Default is 0 (no delay).
		///</summary>
		[ImplementPropertyType("bubbleDelay")]
		public int BubbleDelay
		{
			get { return this.GetPropertyValue<int>("bubbleDelay"); }
		}

		///<summary>
		/// Bubble follows pointer: Check this box to have text bubbles (where defined) follow the mouse pointer.
		///</summary>
		[ImplementPropertyType("bubbleFollow")]
		public bool BubbleFollow
		{
			get { return this.GetPropertyValue<bool>("bubbleFollow"); }
		}

		///<summary>
		/// Position: Select the position of text bubbles (where defined). Default is "Top".
		///</summary>
		[ImplementPropertyType("bubblePosition")]
		public string BubblePosition
		{
			get { return this.GetPropertyValue<string>("bubblePosition"); }
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>Reusable Sections Folder</summary>
	[PublishedContentModel("folderSectionsReusable")]
	public partial class FolderSectionsReusable : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "folderSectionsReusable";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public FolderSectionsReusable(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderSectionsReusable, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Sections Folder</summary>
	[PublishedContentModel("folderSections")]
	public partial class FolderSections : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "folderSections";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public FolderSections(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderSections, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Service Item</summary>
	[PublishedContentModel("dServiceItem")]
	public partial class DServiceItem : PublishedContentModel, IAbstractlink
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "dServiceItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DServiceItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DServiceItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Description
		///</summary>
		[ImplementPropertyType("description")]
		public string Description
		{
			get { return this.GetPropertyValue<string>("description"); }
		}

		///<summary>
		/// Icon: Select the icon you need. You can find the class names together with icons at http://ionicons.com/  If you leave this blank, the default film reel icon will be used.
		///</summary>
		[ImplementPropertyType("icon")]
		public string Icon
		{
			get { return this.GetPropertyValue<string>("icon"); }
		}

		///<summary>
		/// External Link: Optional link to an external page. External link always opens in a new window. External link OVERRIDES internal link in case it is also set.
		///</summary>
		[ImplementPropertyType("externalLink")]
		public string ExternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetExternalLink(this); }
		}

		///<summary>
		/// Internal Link: Link to a page on your site
		///</summary>
		[ImplementPropertyType("internalLink")]
		public IEnumerable<IPublishedContent> InternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetInternalLink(this); }
		}
	}

	/// <summary>Services Section</summary>
	[PublishedContentModel("sectionServices")]
	public partial class SectionServices : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionServices";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionServices(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionServices, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>Slider Image</summary>
	[PublishedContentModel("dSliderImage")]
	public partial class DSliderImage : PublishedContentModel, IAbstractBackgroundImage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "dSliderImage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DSliderImage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DSliderImage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Subtitle: If you leave this blank, then the general subtitle will be used instead.
		///</summary>
		[ImplementPropertyType("subtitle")]
		public string Subtitle
		{
			get { return this.GetPropertyValue<string>("subtitle"); }
		}

		///<summary>
		/// Title: If you leave this blank, then the general title will be used instead. Please note that the node name IS NOT USED in any case.
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}

		///<summary>
		/// Image
		///</summary>
		[ImplementPropertyType("image")]
		public IPublishedContent Image
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetImage(this); }
		}

		///<summary>
		/// Use Light Overlay: If you have checked "Use Overlay" above, check this box to use a light overlay. If you leave this box unchecked, a dark overlay will be used.
		///</summary>
		[ImplementPropertyType("useLightOverlay")]
		public bool UseLightOverlay
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetUseLightOverlay(this); }
		}

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetUseLightTextColor(this); }
		}

		///<summary>
		/// Use Overlay: If you have set a background image, you can use a dark or light overlay
		///</summary>
		[ImplementPropertyType("useOverlay")]
		public bool UseOverlay
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetUseOverlay(this); }
		}
	}

	/// <summary>Slider Images Folder</summary>
	[PublishedContentModel("folderSliderImages")]
	public partial class FolderSliderImages : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "folderSliderImages";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public FolderSliderImages(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderSliderImages, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Statement Section</summary>
	[PublishedContentModel("sectionStatement")]
	public partial class SectionStatement : PublishedContentModel, IAbstractBackgroundImage, IAbstractlink, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionStatement";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionStatement(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionStatement, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Button Text: Enter the label for the button (e.g. "WATCH VIDEO"). If you leave this field blank, no button will be displayed.
		///</summary>
		[ImplementPropertyType("buttonText")]
		public string ButtonText
		{
			get { return this.GetPropertyValue<string>("buttonText"); }
		}

		///<summary>
		/// Icon: Enter the class for the icon you need. You can find the names at http://ionicons.com/
		///</summary>
		[ImplementPropertyType("icon")]
		public string Icon
		{
			get { return this.GetPropertyValue<string>("icon"); }
		}

		///<summary>
		/// Text
		///</summary>
		[ImplementPropertyType("text")]
		public string Text
		{
			get { return this.GetPropertyValue<string>("text"); }
		}

		///<summary>
		/// YouTube Video Id: Enter only the id of the video you want to show (not the full url!). Video id OVERRIDES any other link settings so be sure to have this field empty if you need this section to redirect to an internal or external link.
		///</summary>
		[ImplementPropertyType("youtubeId")]
		public string YoutubeId
		{
			get { return this.GetPropertyValue<string>("youtubeId"); }
		}

		///<summary>
		/// Image
		///</summary>
		[ImplementPropertyType("image")]
		public IPublishedContent Image
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetImage(this); }
		}

		///<summary>
		/// Use Light Overlay: If you have checked "Use Overlay" above, check this box to use a light overlay. If you leave this box unchecked, a dark overlay will be used.
		///</summary>
		[ImplementPropertyType("useLightOverlay")]
		public bool UseLightOverlay
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetUseLightOverlay(this); }
		}

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetUseLightTextColor(this); }
		}

		///<summary>
		/// Use Overlay: If you have set a background image, you can use a dark or light overlay
		///</summary>
		[ImplementPropertyType("useOverlay")]
		public bool UseOverlay
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetUseOverlay(this); }
		}

		///<summary>
		/// External Link: Optional link to an external page. External link always opens in a new window. External link OVERRIDES internal link in case it is also set.
		///</summary>
		[ImplementPropertyType("externalLink")]
		public string ExternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetExternalLink(this); }
		}

		///<summary>
		/// Internal Link: Link to a page on your site
		///</summary>
		[ImplementPropertyType("internalLink")]
		public IEnumerable<IPublishedContent> InternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetInternalLink(this); }
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>Team Item</summary>
	[PublishedContentModel("dTeamItem")]
	public partial class DTeamItem : PublishedContentModel, IAbstractlink
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "dTeamItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DTeamItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DTeamItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Facebook URL
		///</summary>
		[ImplementPropertyType("facebookUrl")]
		public string FacebookUrl
		{
			get { return this.GetPropertyValue<string>("facebookUrl"); }
		}

		///<summary>
		/// GitHub URL
		///</summary>
		[ImplementPropertyType("githubUrl")]
		public string GithubUrl
		{
			get { return this.GetPropertyValue<string>("githubUrl"); }
		}

		///<summary>
		/// Google Plus URL
		///</summary>
		[ImplementPropertyType("googlePlusUrl")]
		public string GooglePlusUrl
		{
			get { return this.GetPropertyValue<string>("googlePlusUrl"); }
		}

		///<summary>
		/// Image
		///</summary>
		[ImplementPropertyType("image")]
		public Umbraco.Web.Models.ImageCropDataSet Image
		{
			get { return this.GetPropertyValue<Umbraco.Web.Models.ImageCropDataSet>("image"); }
		}

		///<summary>
		/// LinkedIn URL
		///</summary>
		[ImplementPropertyType("linkedinUrl")]
		public string LinkedinUrl
		{
			get { return this.GetPropertyValue<string>("linkedinUrl"); }
		}

		///<summary>
		/// Personal Page URL
		///</summary>
		[ImplementPropertyType("personalPageUrl")]
		public string PersonalPageUrl
		{
			get { return this.GetPropertyValue<string>("personalPageUrl"); }
		}

		///<summary>
		/// Pinterest URL
		///</summary>
		[ImplementPropertyType("pinterestUrl")]
		public string PinterestUrl
		{
			get { return this.GetPropertyValue<string>("pinterestUrl"); }
		}

		///<summary>
		/// Role
		///</summary>
		[ImplementPropertyType("role")]
		public string Role
		{
			get { return this.GetPropertyValue<string>("role"); }
		}

		///<summary>
		/// Summary
		///</summary>
		[ImplementPropertyType("summary")]
		public string Summary
		{
			get { return this.GetPropertyValue<string>("summary"); }
		}

		///<summary>
		/// Tumblr URL
		///</summary>
		[ImplementPropertyType("tumblrUrl")]
		public string TumblrUrl
		{
			get { return this.GetPropertyValue<string>("tumblrUrl"); }
		}

		///<summary>
		/// Twitter URL
		///</summary>
		[ImplementPropertyType("twitterUrl")]
		public string TwitterUrl
		{
			get { return this.GetPropertyValue<string>("twitterUrl"); }
		}

		///<summary>
		/// Vimeo URL
		///</summary>
		[ImplementPropertyType("vimeoUrl")]
		public string VimeoUrl
		{
			get { return this.GetPropertyValue<string>("vimeoUrl"); }
		}

		///<summary>
		/// Youtube URL
		///</summary>
		[ImplementPropertyType("youtubeUrl")]
		public string YoutubeUrl
		{
			get { return this.GetPropertyValue<string>("youtubeUrl"); }
		}

		///<summary>
		/// External Link: Optional link to an external page. External link always opens in a new window. External link OVERRIDES internal link in case it is also set.
		///</summary>
		[ImplementPropertyType("externalLink")]
		public string ExternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetExternalLink(this); }
		}

		///<summary>
		/// Internal Link: Link to a page on your site
		///</summary>
		[ImplementPropertyType("internalLink")]
		public IEnumerable<IPublishedContent> InternalLink
		{
			get { return Umbraco.Web.PublishedContentModels.Abstractlink.GetInternalLink(this); }
		}
	}

	/// <summary>Team Section</summary>
	[PublishedContentModel("sectionTeam")]
	public partial class SectionTeam : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionTeam";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionTeam(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionTeam, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Appearance
		///</summary>
		[ImplementPropertyType("appearance")]
		public int Appearance
		{
			get { return this.GetPropertyValue<int>("appearance"); }
		}

		///<summary>
		/// Hide Title
		///</summary>
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle
		{
			get { return this.GetPropertyValue<bool>("hideTitle"); }
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>Testimonial Item</summary>
	[PublishedContentModel("dTestimonialItem")]
	public partial class DTestimonialItem : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "dTestimonialItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DTestimonialItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DTestimonialItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Company, Location or Profession
		///</summary>
		[ImplementPropertyType("authorAdditionalInfo")]
		public string AuthorAdditionalInfo
		{
			get { return this.GetPropertyValue<string>("authorAdditionalInfo"); }
		}

		///<summary>
		/// Information: The name of the node is the author's name.
		///</summary>
		[ImplementPropertyType("information")]
		public string Information
		{
			get { return this.GetPropertyValue<string>("information"); }
		}

		///<summary>
		/// Lead
		///</summary>
		[ImplementPropertyType("lead")]
		public string Lead
		{
			get { return this.GetPropertyValue<string>("lead"); }
		}
	}

	/// <summary>Testimonials Section</summary>
	[PublishedContentModel("sectionTestimonials")]
	public partial class SectionTestimonials : PublishedContentModel, IAbstractBackgroundImage, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionTestimonials";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionTestimonials(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionTestimonials, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Image
		///</summary>
		[ImplementPropertyType("image")]
		public IPublishedContent Image
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetImage(this); }
		}

		///<summary>
		/// Use Light Overlay: If you have checked "Use Overlay" above, check this box to use a light overlay. If you leave this box unchecked, a dark overlay will be used.
		///</summary>
		[ImplementPropertyType("useLightOverlay")]
		public bool UseLightOverlay
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetUseLightOverlay(this); }
		}

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetUseLightTextColor(this); }
		}

		///<summary>
		/// Use Overlay: If you have set a background image, you can use a dark or light overlay
		///</summary>
		[ImplementPropertyType("useOverlay")]
		public bool UseOverlay
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetUseOverlay(this); }
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>Text Section</summary>
	[PublishedContentModel("sectionText")]
	public partial class SectionText : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionText";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionText(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionText, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Center text and title
		///</summary>
		[ImplementPropertyType("centerTextAndTitle")]
		public bool CenterTextAndTitle
		{
			get { return this.GetPropertyValue<bool>("centerTextAndTitle"); }
		}

		///<summary>
		/// GridTextPage
		///</summary>
		[ImplementPropertyType("gridTextPage")]
		public string GridTextPage
		{
			get { return this.GetPropertyValue<string>("gridTextPage"); }
		}

		///<summary>
		/// Hide title
		///</summary>
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle
		{
			get { return this.GetPropertyValue<bool>("hideTitle"); }
		}

		///<summary>
		/// Larger text: Check this box to make text appear with a larger font
		///</summary>
		[ImplementPropertyType("largerText")]
		public bool LargerText
		{
			get { return this.GetPropertyValue<bool>("largerText"); }
		}

		///<summary>
		/// Text
		///</summary>
		[ImplementPropertyType("textContent")]
		public IHtmlString TextContent
		{
			get { return this.GetPropertyValue<IHtmlString>("textContent"); }
		}

		///<summary>
		/// Title Size
		///</summary>
		[ImplementPropertyType("titleSize")]
		public decimal TitleSize
		{
			get { return this.GetPropertyValue<decimal>("titleSize"); }
		}

		///<summary>
		/// Wide text: Check this box to make the section occupy more horizontal space (this has no effect is the section is used as part of a multi-column layout)
		///</summary>
		[ImplementPropertyType("wideText")]
		public bool WideText
		{
			get { return this.GetPropertyValue<bool>("wideText"); }
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>Umazel Home Page</summary>
	[PublishedContentModel("Pagehome")]
	public partial class Pagehome : PublishedContentModel, IAbstractBackgroundImage, IAbstractOpenGraph, IAbstractPage, IAbstractTopMenu
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Pagehome";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Pagehome(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Pagehome, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Intro Subtitle
		///</summary>
		[ImplementPropertyType("introSubtitle")]
		public string IntroSubtitle
		{
			get { return this.GetPropertyValue<string>("introSubtitle"); }
		}

		///<summary>
		/// Intro Summary: Optional short text
		///</summary>
		[ImplementPropertyType("introSummary")]
		public string IntroSummary
		{
			get { return this.GetPropertyValue<string>("introSummary"); }
		}

		///<summary>
		/// Intro Main Title
		///</summary>
		[ImplementPropertyType("introTitle")]
		public string IntroTitle
		{
			get { return this.GetPropertyValue<string>("introTitle"); }
		}

		///<summary>
		/// Intro Type: Select the type of intro for the home page. If you choose to have a video intro please have in mind that image settings are still in effect since an image is displayed until video starts, as well as overlays, dark/light text colors etc.
		///</summary>
		[ImplementPropertyType("introType")]
		public int IntroType
		{
			get { return this.GetPropertyValue<int>("introType"); }
		}

		///<summary>
		/// Notes: This will be used only when intro type is "Static Image" or "Youtube Video". If a Youtube video is present, the image will display until the video is loaded.
		///</summary>
		[ImplementPropertyType("notes")]
		public string Notes
		{
			get { return this.GetPropertyValue<string>("notes"); }
		}

		///<summary>
		/// Youtube Video ID: (Only for type "Youtube Video"). Enter the video id (NOT the whole video url, just the id, e.g. CevxZvSJLk8)
		///</summary>
		[ImplementPropertyType("youtubeVideoId")]
		public string YoutubeVideoId
		{
			get { return this.GetPropertyValue<string>("youtubeVideoId"); }
		}

		///<summary>
		/// Image
		///</summary>
		[ImplementPropertyType("image")]
		public IPublishedContent Image
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetImage(this); }
		}

		///<summary>
		/// Use Light Overlay: If you have checked "Use Overlay" above, check this box to use a light overlay. If you leave this box unchecked, a dark overlay will be used.
		///</summary>
		[ImplementPropertyType("useLightOverlay")]
		public bool UseLightOverlay
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetUseLightOverlay(this); }
		}

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetUseLightTextColor(this); }
		}

		///<summary>
		/// Use Overlay: If you have set a background image, you can use a dark or light overlay
		///</summary>
		[ImplementPropertyType("useOverlay")]
		public bool UseOverlay
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractBackgroundImage.GetUseOverlay(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetMetaKeywords(this); }
		}

		///<summary>
		/// Meta Title
		///</summary>
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetMetaTitle(this); }
		}

		///<summary>
		/// OG Description: If you do not specify a value, description will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogDescription")]
		public string OgDescription
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgDescription(this); }
		}

		///<summary>
		/// OG Image: If you do not specify an image, the image will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogImage")]
		public string OgImage
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgImage(this); }
		}

		///<summary>
		/// OG Title: If you do not specify a value, title will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogTitle")]
		public string OgTitle
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgTitle(this); }
		}

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article
		///</summary>
		[ImplementPropertyType("ogType")]
		public string OgType
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractOpenGraph.GetOgType(this); }
		}

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetAltTitleBreadcrumb(this); }
		}

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetAltTitleInternal(this); }
		}

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetAltTitleMenu(this); }
		}

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetBrowserTitleOverride(this); }
		}

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetHideFromFooter(this); }
		}

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetOverrideTitle(this); }
		}

		///<summary>
		/// Redirect to first sub-page: If you check this box, the current page will immediately redirect to its first child page.
		///</summary>
		[ImplementPropertyType("redirectFirstSubPage")]
		public bool RedirectFirstSubPage
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetRedirectFirstSubPage(this); }
		}

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to page: If you check this box, the current page will immediately redirect to the page selected. Checking this box takes precedence over the "Redirect to first sub-page" setting.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public string UmbracoRedirect
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractPage.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Light Top Menu: If you are using a dark image or a dark overlay, check this button to make the top menu options appear with light colors on this particular page so that it is visible. If you don't check this option, the default dark options will be used.
		///</summary>
		[ImplementPropertyType("lightTopMenu")]
		public bool LightTopMenu
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractTopMenu.GetLightTopMenu(this); }
		}
	}

	/// <summary>Fast Link</summary>
	[PublishedContentModel("fastLink")]
	public partial class FastLink : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "fastLink";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public FastLink(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FastLink, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Custom Section</summary>
	[PublishedContentModel("sectionCustom")]
	public partial class SectionCustom : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionCustom";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionCustom(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionCustom, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Center text and title
		///</summary>
		[ImplementPropertyType("centerTextAndTitle")]
		public bool CenterTextAndTitle
		{
			get { return this.GetPropertyValue<bool>("centerTextAndTitle"); }
		}

		///<summary>
		/// Custom
		///</summary>
		[ImplementPropertyType("custom")]
		public Newtonsoft.Json.Linq.JToken Custom
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("custom"); }
		}

		///<summary>
		/// Hide title
		///</summary>
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle
		{
			get { return this.GetPropertyValue<bool>("hideTitle"); }
		}

		///<summary>
		/// Larger text: Check this box to make text appear with a larger font
		///</summary>
		[ImplementPropertyType("largerText")]
		public bool LargerText
		{
			get { return this.GetPropertyValue<bool>("largerText"); }
		}

		///<summary>
		/// Text
		///</summary>
		[ImplementPropertyType("textContent")]
		public IHtmlString TextContent
		{
			get { return this.GetPropertyValue<IHtmlString>("textContent"); }
		}

		///<summary>
		/// Title Size
		///</summary>
		[ImplementPropertyType("titleSize")]
		public decimal TitleSize
		{
			get { return this.GetPropertyValue<decimal>("titleSize"); }
		}

		///<summary>
		/// Wide text: Check this box to make the section occupy more horizontal space (this has no effect is the section is used as part of a multi-column layout)
		///</summary>
		[ImplementPropertyType("wideText")]
		public bool WideText
		{
			get { return this.GetPropertyValue<bool>("wideText"); }
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return Umbraco.Web.PublishedContentModels.AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}

	/// <summary>Folder</summary>
	[PublishedContentModel("Folder")]
	public partial class Folder : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Folder";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Folder(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Folder, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Contents:
		///</summary>
		[ImplementPropertyType("contents")]
		public object Contents
		{
			get { return this.GetPropertyValue("contents"); }
		}
	}

	/// <summary>Image</summary>
	[PublishedContentModel("Image")]
	public partial class Image : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Image";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Image(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Image, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload image
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public Umbraco.Web.Models.ImageCropDataSet UmbracoFile
		{
			get { return this.GetPropertyValue<Umbraco.Web.Models.ImageCropDataSet>("umbracoFile"); }
		}

		///<summary>
		/// Height
		///</summary>
		[ImplementPropertyType("umbracoHeight")]
		public string UmbracoHeight
		{
			get { return this.GetPropertyValue<string>("umbracoHeight"); }
		}

		///<summary>
		/// Width
		///</summary>
		[ImplementPropertyType("umbracoWidth")]
		public string UmbracoWidth
		{
			get { return this.GetPropertyValue<string>("umbracoWidth"); }
		}
	}

	/// <summary>File</summary>
	[PublishedContentModel("File")]
	public partial class File : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "File";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public File(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<File, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload file
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public string UmbracoFile
		{
			get { return this.GetPropertyValue<string>("umbracoFile"); }
		}
	}

	/// <summary>Member</summary>
	[PublishedContentModel("Member")]
	public partial class Member : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Member";
		public new const PublishedItemType ModelItemType = PublishedItemType.Member;
#pragma warning restore 0109

		public Member(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Member, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Is Approved
		///</summary>
		[ImplementPropertyType("umbracoMemberApproved")]
		public bool UmbracoMemberApproved
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberApproved"); }
		}

		///<summary>
		/// Comments
		///</summary>
		[ImplementPropertyType("umbracoMemberComments")]
		public string UmbracoMemberComments
		{
			get { return this.GetPropertyValue<string>("umbracoMemberComments"); }
		}

		///<summary>
		/// Failed Password Attempts
		///</summary>
		[ImplementPropertyType("umbracoMemberFailedPasswordAttempts")]
		public string UmbracoMemberFailedPasswordAttempts
		{
			get { return this.GetPropertyValue<string>("umbracoMemberFailedPasswordAttempts"); }
		}

		///<summary>
		/// Last Lockout Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLockoutDate")]
		public string UmbracoMemberLastLockoutDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLockoutDate"); }
		}

		///<summary>
		/// Last Login Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLogin")]
		public string UmbracoMemberLastLogin
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLogin"); }
		}

		///<summary>
		/// Last Password Change Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastPasswordChangeDate")]
		public string UmbracoMemberLastPasswordChangeDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastPasswordChangeDate"); }
		}

		///<summary>
		/// Is Locked Out
		///</summary>
		[ImplementPropertyType("umbracoMemberLockedOut")]
		public bool UmbracoMemberLockedOut
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberLockedOut"); }
		}

		///<summary>
		/// Password Answer
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalAnswer")]
		public string UmbracoMemberPasswordRetrievalAnswer
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalAnswer"); }
		}

		///<summary>
		/// Password Question
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalQuestion")]
		public string UmbracoMemberPasswordRetrievalQuestion
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalQuestion"); }
		}
	}

}
